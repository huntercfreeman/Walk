@using Walk.Common.RazorLib.Installations.Models
@using Walk.Common.RazorLib.Contexts.Displays
@using Walk.Common.RazorLib.Contexts.Models;
@using Walk.Common.RazorLib.CustomEvents.Models
@using Walk.Common.RazorLib.Keyboards.Models;
@using Walk.Common.RazorLib.Keys.Models
@using Walk.Common.RazorLib.Icons.Models
@using Walk.Common.RazorLib.Dimensions;
@using Walk.Common.RazorLib.Dimensions.Models;
@using Walk.Common.RazorLib.ShouldRenderBoundaries.Displays
@using Walk.TextEditor.RazorLib.Keymaps.Models;
@using Walk.TextEditor.RazorLib.Cursors.Models
@using Walk.TextEditor.RazorLib.Lines.Models;
@using Walk.TextEditor.RazorLib.Options.Models;
@using Walk.TextEditor.RazorLib.Htmls.Models;
@using Walk.TextEditor.RazorLib.TextEditors.Displays.Internals
@using Walk.TextEditor.RazorLib.TextEditors.Models;
@using Walk.TextEditor.RazorLib.TextEditors.Models.Internals
@using Walk.TextEditor.RazorLib.Virtualizations.Models
@using Walk.TextEditor.RazorLib.Decorations.Models
@using Walk.TextEditor.RazorLib.Lexers.Models

<div id="@_componentData.RowSectionElementId"
     style="@_componentData.PersonalWrapperCssStyle"
     class="@_componentData.PersonalWrapperCssClass"
     tabindex="-1">
    
	<div class="di_te_virtualization-boundary-display"
		 style="@_componentData.BothVirtualizationBoundaryStyleCssString">
	</div>
    
    @if (_componentData.RenderBatch.IsValid && _componentData.Css_LineIndexCache_EntryMap.Count != 0)
    {
    	<div class="di_te_three-dots-section">
        	@for (int inlineUiIndex = 0; inlineUiIndex < _componentData.InlineUiStyleList.Count; inlineUiIndex++)
        	{
        		<div style="@(_componentData.InlineUiStyleList[inlineUiIndex])"><!--
	    			-->...<!--
	    		--></div>
        	}
        </div>
					                           
		for (int groupIndex = 0; groupIndex < _componentData.FirstPresentationLayerGroupList.Count; groupIndex++)
		{
			<div class="@_componentData.FirstPresentationLayerGroupList[groupIndex].CssClassString">
				@for (int textSpanIndex = _componentData.FirstPresentationLayerGroupList[groupIndex].StartInclusiveIndex;
					  textSpanIndex < _componentData.FirstPresentationLayerGroupList[groupIndex].EndExclusiveIndex;
					  textSpanIndex++)
				{
					<div class="@_componentData.FirstPresentationLayerTextSpanList[textSpanIndex].PresentationCssClass"
                         style="@_componentData.FirstPresentationLayerTextSpanList[textSpanIndex].PresentationCssStyle">
                    </div>
				}
			</div>
		}
		
		<div class="di_te_text-selection-group">
		    @for (var i = 0; i < _componentData.SelectionStyleList.Count; i++)
	        {
				<div style="@_componentData.SelectionStyleList[i]">
				</div>
	        }
		</div>
		
		@for (int groupIndex = 0; groupIndex < _componentData.LastPresentationLayerGroupList.Count; groupIndex++)
		{
			<div class="@_componentData.LastPresentationLayerGroupList[groupIndex].CssClassString">
				@for (int textSpanIndex = _componentData.LastPresentationLayerGroupList[groupIndex].StartInclusiveIndex;
					  textSpanIndex < _componentData.LastPresentationLayerGroupList[groupIndex].EndExclusiveIndex;
					  textSpanIndex++)
				{
					<div class="@_componentData.LastPresentationLayerTextSpanList[textSpanIndex].PresentationCssClass"
                         style="@_componentData.LastPresentationLayerTextSpanList[textSpanIndex].PresentationCssStyle">
                    </div>
				}
			</div>
		}
    
    	var collapsePoint = new CollapsePoint(-1, false, string.Empty, -1);
    	
    	if (ViewModelDisplayOptions.IncludeGutterComponent)
    	{
    	    string gutterColumnTopCssValue;
    	
    	    if (_componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList.Count > 0)
	        	gutterColumnTopCssValue = _componentData.Css_LineIndexCache_EntryMap[_componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList[0].LineIndex].TopCssValue;
	        else
	            gutterColumnTopCssValue = "0";
	        
	        _componentData.UiStringBuilder.Clear();
	        _componentData.UiStringBuilder.Append("top: ");
	        _componentData.UiStringBuilder.Append(gutterColumnTopCssValue);
	        _componentData.UiStringBuilder.Append("px;");
    	
    		<div class="di_te_gutter-section"
    			 style="@_componentData.Gutter_WidthCssStyle">
    			 
    			<div class="di_te_gutter-column"
    			     style="@(_componentData.UiStringBuilder.ToString())">
    			</div>
    			 
	    		@for (int virtualizationResultIndex = 0;
	    			  virtualizationResultIndex < _componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList.Count;
	    			  virtualizationResultIndex++)
			    {
			        <div style="@(_componentData.GetGutterStyleCss(_componentData.Css_LineIndexCache_EntryMap[_componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList[virtualizationResultIndex].LineIndex].TopCssValue))">
			             
			            @(_componentData.Css_LineIndexCache_EntryMap[_componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList[virtualizationResultIndex].LineIndex].LineNumberString)
			            
			            @for (int i = 0; i < _componentData.VirtualizedCollapsePointList.Count; i++)
		            	{
		            		if (_componentData.VirtualizedCollapsePointList[i].AppendToLineIndex == _componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList[virtualizationResultIndex].LineIndex)
		            		{
		            			collapsePoint = _componentData.VirtualizedCollapsePointList[i];
		            			break;
		            		}
		            	}
		
						@if (collapsePoint.AppendToLineIndex == _componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList[virtualizationResultIndex].LineIndex)
						{
						    <span class="di_te_gutter-chevron">
						    	@if (collapsePoint.IsCollapsed)
						    	{
						    		@IconChevronRightFragment.Render(_iconDriver)
						    	}
						    	else
						    	{
						    		@IconChevronDownFragment.Render(_iconDriver)
						    	}
							</span>
						}
			        </div>
		    	}
			</div>
    	}
    	
    	<div class="di_te_text-section">
	    	@for (int virtualizationResultIndex = 0;
	    		  virtualizationResultIndex < _componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList.Count;
	    		  virtualizationResultIndex++)
		    {
		    	<div style="@_componentData.RowSection_GetRowStyleCss(_componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList[virtualizationResultIndex].LineIndex)">
				
					@*
						'!= 0' because the struct's int property will default to '0',
						and if there is no text then the property is unchanged from its default value.
					*@
					@if (_componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList[virtualizationResultIndex].VirtualizationSpan_EndExclusiveIndex != 0)
					{
						for (int i = _componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList[virtualizationResultIndex].VirtualizationSpan_StartInclusiveIndex; i < _componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList[virtualizationResultIndex].VirtualizationSpan_EndExclusiveIndex; i++)
						{
							<span class="@_componentData.RenderBatch.ViewModel.VirtualizationResult.VirtualizationSpanList[i].CssClass">
					            @(_componentData.RenderBatch.ViewModel.VirtualizationResult.VirtualizationSpanList[i].MarkupStringText)
					        </span>
					    }
					}
					
					@if (GlobalShowNewlines && _componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList[virtualizationResultIndex].LineIndex < _componentData.RenderBatch.Model.LineCount)
					{
						// amountOfLeftInCharacterWidthUnits <= lengthOfLine
						if (_componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList[virtualizationResultIndex].LeftInPixels / _componentData.RenderBatch.ViewModel.CharAndLineMeasurements.CharacterWidth <=
							_componentData.RenderBatch.Model.GetLineLength(_componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList[virtualizationResultIndex].LineIndex, true))
						{
						    <span class="di_te_newline">
						        @_componentData.RenderBatch.Model.LineEndList[_componentData.RenderBatch.ViewModel.VirtualizationResult.EntryList[virtualizationResultIndex].LineIndex].LineEndKind.AsCharactersHtmlEscaped()
						    </span>
						}
					}
				</div>
		    }
	    </div>
	    
	    <textarea id="@_componentData.PrimaryCursorContentId"
				  tabindex="@_componentData.RenderBatch.TextEditorRenderBatchPersistentState.ViewModelDisplayOptions.TabIndex"
				  class="@_componentData.BlinkAnimationCssClass"
				  style="@_componentData.CursorCssStyle">
		</textarea>
						
		<div class="di_te_text-editor-caret-row"
				style="@_componentData.CaretRowCssStyle">
		</div>
		
		<div class="di_te_scrollbar-section" style="@_componentData.ScrollbarSection_LeftCssStyle">
		
			<div class="di_te_scrollbar di_te_scrollbar-horizontal"
			     id="@HORIZONTAL_ScrollbarElementId"
			     style="@_componentData.HORIZONTAL_ScrollbarCssStyle">
			    
			    <div class="di_te_scrollbar-slider"
			         id="@HORIZONTAL_ScrollbarSliderElementId"
			         style="@_componentData.HORIZONTAL_SliderCssStyle">
			    </div>
			</div><!--
			
			--><div class="di_te_scrollbar di_te_scrollbar-vertical"
			        id="@VERTICAL_ScrollbarElementId">
			         
			    <div class="di_te_scrollbar-slider"
			         id="@VERTICAL_ScrollbarSliderElementId"
			         style="@_componentData.VERTICAL_SliderCssStyle">
			    </div>
			</div><!--
		    
			--><div class="di_te_scrollbar di_te_scrollbar-connector"
			        id="@CONNECTOR_ScrollbarElementId">
			</div>
		</div>
	    
	    var tooltipViewModel = _componentData.RenderBatch.ViewModel.PersistentState.TooltipViewModel;
	    
	    @if (tooltipViewModel is not null)
	    {
	        <div class="di_te_tooltip di_set-selectable @(tooltipViewModel.CssClassString ?? string.Empty)"
	             style="left: @(_componentData.TooltipRelativeX)px; top: @(_componentData.TooltipRelativeY)px;"
	             @onmouseover="tooltipViewModel.OnMouseOver"
	             @onmousedown:stopPropagation="true"
	             @onmousemove:stopPropagation="true"
	             @ondblclick:stopPropagation="true"
	             @onclick:stopPropagation="true"
	             @oncontextmenu:stopPropagation="true">
	
	            <DynamicComponent Type="tooltipViewModel.RendererType"
	                              Parameters="tooltipViewModel.ParameterMap" />
	        </div>
	    }
	}
	else
    {
    	if (_componentData.RenderBatch.Model is null)
	    {
	        <div>The @nameof(TextEditorModel) was null</div>
	    }
	    else if (_componentData.RenderBatch.ViewModel is null)
	    {
	        <div>The @nameof(TextEditorViewModel) was null</div>
	    }
	    else if (_componentData.RenderBatch.TextEditorRenderBatchPersistentState.TextEditorOptions is null)
	    {
	        <div>The @nameof(TextEditorOptions) was null</div>
	    }
    }
</div>

