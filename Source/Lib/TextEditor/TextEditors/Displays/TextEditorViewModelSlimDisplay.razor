@using Walk.Common.RazorLib.Installations.Models
@using Walk.Common.RazorLib.Contexts.Displays
@using Walk.Common.RazorLib.Contexts.Models;
@using Walk.Common.RazorLib.CustomEvents.Models
@using Walk.Common.RazorLib.Keyboards.Models;
@using Walk.Common.RazorLib.Keys.Models
@using Walk.Common.RazorLib.Icons.Models
@using Walk.Common.RazorLib.Dimensions;
@using Walk.Common.RazorLib.Dimensions.Models
@using Walk.TextEditor.RazorLib.Keymaps.Models;
@using Walk.TextEditor.RazorLib.Cursors.Models
@using Walk.TextEditor.RazorLib.Lines.Models;
@using Walk.TextEditor.RazorLib.Options.Models;
@using Walk.TextEditor.RazorLib.Htmls.Models;
@using Walk.TextEditor.RazorLib.TextEditors.Displays.Internals
@using Walk.TextEditor.RazorLib.TextEditors.Models;
@using Walk.TextEditor.RazorLib.TextEditors.Models.Internals
@using Walk.TextEditor.RazorLib.Decorations.Models
@using Walk.TextEditor.RazorLib.Lexers.Models

<div id="@_componentData.RowSectionElementId"
     style="@_componentData.PersonalWrapperCssStyle"
     class="@_componentData.PersonalWrapperCssClass"
     tabindex="-1">
    
	<div class="di_te_virtualization-boundary-display"
		 style="@_componentData.BothVirtualizationBoundaryStyleCssString">
	</div>
    
    @{ var virtualizationResult = _componentData.Virtualization; }
    
    @if (virtualizationResult.IsValid && _componentData.LineIndexCache.Map.Count != 0)
    {
    	<div class="di_te_three-dots-section">
        	@for (int inlineUiIndex = 0; inlineUiIndex < virtualizationResult.InlineUiStyleList.Count; inlineUiIndex++)
        	{
        		<div style="@(virtualizationResult.InlineUiStyleList[inlineUiIndex])"><!--
	    			-->...<!--
	    		--></div>
        	}
        </div>
					                           
		for (int groupIndex = 0; groupIndex < virtualizationResult.FirstPresentationLayerGroupList.Count; groupIndex++)
		{
			<div class="@virtualizationResult.FirstPresentationLayerGroupList[groupIndex].CssClassString">
				@for (int textSpanIndex = virtualizationResult.FirstPresentationLayerGroupList[groupIndex].StartInclusiveIndex;
					  textSpanIndex < virtualizationResult.FirstPresentationLayerGroupList[groupIndex].EndExclusiveIndex;
					  textSpanIndex++)
				{
					<div class="@virtualizationResult.FirstPresentationLayerTextSpanList[textSpanIndex].PresentationCssClass"
                         style="@virtualizationResult.FirstPresentationLayerTextSpanList[textSpanIndex].PresentationCssStyle">
                    </div>
				}
			</div>
		}
		
		<div class="di_te_text-selection-group">
		    @for (var i = 0; i < virtualizationResult.SelectionStyleList.Count; i++)
	        {
				<div style="@virtualizationResult.SelectionStyleList[i]">
				</div>
	        }
		</div>
		
		@for (int groupIndex = 0; groupIndex < virtualizationResult.LastPresentationLayerGroupList.Count; groupIndex++)
		{
			<div class="@virtualizationResult.LastPresentationLayerGroupList[groupIndex].CssClassString">
				@for (int textSpanIndex = virtualizationResult.LastPresentationLayerGroupList[groupIndex].StartInclusiveIndex;
					  textSpanIndex < virtualizationResult.LastPresentationLayerGroupList[groupIndex].EndExclusiveIndex;
					  textSpanIndex++)
				{
					<div class="@virtualizationResult.LastPresentationLayerTextSpanList[textSpanIndex].PresentationCssClass"
                         style="@virtualizationResult.LastPresentationLayerTextSpanList[textSpanIndex].PresentationCssStyle">
                    </div>
				}
			</div>
		}
    
    	var collapsePoint = new CollapsePoint(-1, false, string.Empty, -1);
    	
    	if (ViewModelDisplayOptions.IncludeGutterComponent)
    	{
    	    <div class="di_te_gutter-section"
    			 style="@virtualizationResult.Gutter_WidthCssStyle">
    			 
    			<div class="di_te_gutter-column"
    			     style="@virtualizationResult.GutterColumnTopCss">
    			</div>
    			 
	    		@for (int virtualizationResultIndex = 0;
	    			  virtualizationResultIndex < virtualizationResult.ViewModel.Virtualization.Count;
	    			  virtualizationResultIndex++)
			    {
			        <div style="@virtualizationResult.EntryList[virtualizationResultIndex].GutterCssStyle">
			            
			            @(virtualizationResult.EntryList[virtualizationResultIndex].LineNumberString)
			            
			            @for (int i = 0; i < virtualizationResult.VirtualizedCollapsePointList.Count; i++)
		            	{
		            		if (virtualizationResult.VirtualizedCollapsePointList[i].AppendToLineIndex == virtualizationResult.ViewModel.Virtualization.EntryList[virtualizationResultIndex].LineIndex)
		            		{
		            			collapsePoint = virtualizationResult.VirtualizedCollapsePointList[i];
		            			break;
		            		}
		            	}
		
						@if (collapsePoint.AppendToLineIndex == virtualizationResult.EntryList[virtualizationResultIndex].LineIndex)
						{
						    <span class="di_te_gutter-chevron">
						    	@if (collapsePoint.IsCollapsed)
						    	{
						    		@IconChevronRightFragment.Render(_iconDriver)
						    	}
						    	else
						    	{
						    		@IconChevronDownFragment.Render(_iconDriver)
						    	}
							</span>
						}
			        </div>
		    	}
			</div>
    	}
    	
    	<div class="di_te_text-section">
    	
    	    @{
    	        var entireSpan = System.Runtime.InteropServices.CollectionsMarshal.AsSpan(virtualizationResult.VirtualizationSpanList);
    	    }
    	
	    	@for (int virtualizationResultIndex = 0;
	    		  virtualizationResultIndex < virtualizationResult.Count;
	    		  virtualizationResultIndex++)
		    {
		    	<div style="@virtualizationResult.EntryList[virtualizationResultIndex].LineCssStyle">
				
					@*
						'!= 0' because the struct's int property will default to '0',
						and if there is no text then the property is unchanged from its default value.
					*@
					@if (virtualizationResult.EntryList[virtualizationResultIndex].VirtualizationSpan_EndExclusiveIndex != 0)
					{
					    var smallSpan = entireSpan.Slice(
					        virtualizationResult.EntryList[virtualizationResultIndex].VirtualizationSpan_StartInclusiveIndex,
					        virtualizationResult.EntryList[virtualizationResultIndex].VirtualizationSpan_EndExclusiveIndex -
					            virtualizationResult.EntryList[virtualizationResultIndex].VirtualizationSpan_StartInclusiveIndex);
					
						foreach (var virtualizationSpan in smallSpan)
						{
							<span class="@virtualizationSpan.CssClass">
					            @(virtualizationSpan.MarkupStringText)
					        </span>
					    }
					}
					
					@if (GlobalShowNewlines && virtualizationResult.EntryList[virtualizationResultIndex].LineIndex < virtualizationResult.Model.LineCount)
					{
						// amountOfLeftInCharacterWidthUnits <= lengthOfLine
						if (virtualizationResult.EntryList[virtualizationResultIndex].LeftInPixels / virtualizationResult.ViewModel.Virtualization.CharAndLineMeasurements.CharacterWidth <=
							virtualizationResult.Model.GetLineLength(virtualizationResult.ViewModel.Virtualization.EntryList[virtualizationResultIndex].LineIndex, true))
						{
						    <span class="di_te_newline">
						        @virtualizationResult.Model.LineEndList[virtualizationResult.ViewModel.Virtualization.EntryList[virtualizationResultIndex].LineIndex].LineEndKind.AsCharactersHtmlEscaped()
						    </span>
						}
					}
				</div>
		    }
	    </div>
	    
	    <textarea id="@_componentData.PrimaryCursorContentId"
				  tabindex="@virtualizationResult.TextEditorRenderBatchPersistentState.ViewModelDisplayOptions.TabIndex"
				  class="@_componentData.BlinkAnimationCssClass"
				  style="@virtualizationResult.CursorCssStyle">
		</textarea>
						
		<div class="@CaretRowCssClass"
			 style="@virtualizationResult.CaretRowCssStyle">
		</div>
	}
	else
    {
    	if (virtualizationResult.Model is null)
	    {
	        <div>The @nameof(TextEditorModel) was null</div>
	    }
	    else if (virtualizationResult.ViewModel is null)
	    {
	        <div>The @nameof(TextEditorViewModel) was null</div>
	    }
	    else if (virtualizationResult?.TextEditorRenderBatchPersistentState?.TextEditorOptions is null)
	    {
	        <div>The @nameof(TextEditorOptions) was null</div>
	    }
    }
    
    <div class="di_te_scrollbar-section" style="@virtualizationResult.ScrollbarSection_LeftCssStyle">
		
		<div class="di_te_scrollbar di_te_scrollbar-horizontal"
		     id="@HORIZONTAL_ScrollbarElementId"
		     style="@virtualizationResult.HORIZONTAL_ScrollbarCssStyle">
		    
		    <div class="di_te_scrollbar-slider"
		         id="@HORIZONTAL_ScrollbarSliderElementId"
		         style="@virtualizationResult.HORIZONTAL_SliderCssStyle">
		    </div>
		</div><!--
		
		--><div class="di_te_scrollbar di_te_scrollbar-vertical"
		        id="@VERTICAL_ScrollbarElementId">
		         
		    <div class="di_te_scrollbar-slider"
		         id="@VERTICAL_ScrollbarSliderElementId"
		         style="@virtualizationResult.VERTICAL_SliderCssStyle">
		    </div>
		</div><!--
	    
		--><div class="di_te_scrollbar di_te_scrollbar-connector"
		        id="@CONNECTOR_ScrollbarElementId">
		</div>
	</div>
</div>

