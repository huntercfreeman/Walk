@using Walk.Common.RazorLib.Dropdowns.Displays
@using Walk.Common.RazorLib.Dropdowns.Models
@using Walk.Common.RazorLib.Notifications.Models
@using Walk.Common.RazorLib.Notifications.Models;
@using Walk.Common.RazorLib.Dynamics.Models
@using Walk.Common.RazorLib.Panels.Models

<div class="di_dynamic-tab-list">

	@{
	    var textEditorState = DotNetService.TextEditorService.TextEditorState;
	    
	    var textEditorGroup = DotNetService.TextEditorService.Group_GetTextEditorGroupState().EditorTextEditorGroup;
	    
    	_tabCascadingValueBatch.HandleTabButtonOnContextMenu = HandleTabButtonOnContextMenu;
    	_tabCascadingValueBatch.SubscribeToDragEventForScrolling = SubscribeToDragEventForScrolling;
    
    	var appOptionsState = DotNetService.CommonService.GetAppOptionsState();
    	var iconDriver = new IconDriver(
			appOptionsState.Options.IconSizeInPixels,
			appOptionsState.Options.IconSizeInPixels);
    }

	@foreach (var viewModelKey in textEditorGroup.ViewModelKeyList)
	{
        var viewModel = textEditorState.ViewModelGetOrDefault(viewModelKey);
        
        if (viewModel is not null)
        {
            viewModel.PersistentState.TabGroup = textEditorGroup;
            IPanelTab? panelTab = viewModel.PersistentState;
            panelTab.TabCascadingValueBatch = _tabCascadingValueBatch;
        
            <button class="@GetCssClass(panelTab)"
                    title="@panelTab.TitleVerbose"
            		@key="panelTab.DynamicViewModelKey"
            		@onclick="panelTab.OnClick"
                    @onmousedown="panelTab.HandleOnMouseDownAsync"
                    @onmouseup="HandleOnMouseUp"
                    @onmouseout="panelTab.HandleOnMouseOutAsync"
            		@oncontextmenu:preventDefault="true"
            		@oncontextmenu="panelTab.ManuallyPropagateOnContextMenu">
            	<span class="di_dynamic-tab-text">@panelTab.Title</span>
            
                <button class="di_button di_button-close"
        	            @onclick:stopPropagation="true"
        	            @onclick="panelTab.CloseTabOnClickAsync">
        	        @IconCloseFragment.Render(iconDriver)
        	    </button>
            </button>
        }
	}
</div>
