@using Walk.Extensions.CompilerServices.Syntax
@using Walk.Extensions.CompilerServices.Syntax.Nodes
@using Walk.TextEditor.RazorLib.TextEditors.Displays.Internals

@{
	var componentData = GetComponentData();
}

<div class="di_te_text-editor-header @componentData?.WrapperCssClass di_te_compiler-service-header"
     style="@componentData?.WrapperCssStyle">
	 
	@{
		var showDefaultToolbarLocal = _showDefaultToolbar;
		
		var appOptionsState = TextEditorService.CommonService.GetAppOptionsState();
		
		var iconDriver = new IconDriver(
			appOptionsState.Options.IconSizeInPixels,
			appOptionsState.Options.IconSizeInPixels);
	}
	
	<div style="justify-content: space-between; display: flex;">
		<div title="ICodeBlockOwner">
			@{
			    // These change within a background task.
			    var codeBlockOwnerLocal = _codeBlockOwner;
			    var syntaxKind = _syntaxKind;
		    }
			
			@if (codeBlockOwnerLocal is null)
			{
			    <text>@IconBlankFragment.Render(iconDriver)</text>
				
			    switch (syntaxKind)
			    {
			        case SyntaxKind.IfStatementNode:
			            <text>IfStatementNode</text>
			            break;
		            case SyntaxKind.WhileStatementNode:
		                <text>WhileStatementNode</text>
		                break;
		            case SyntaxKind.ForStatementNode:
		                <text>ForStatementNode</text>
		                break;
		            case SyntaxKind.ForeachStatementNode:
		                <text>ForeachStatementNode</text>
		                break;
		            case SyntaxKind.SwitchStatementNode:
		                <text>SwitchStatementNode</text>
		                break;
		            case SyntaxKind.DoWhileStatementNode:
		                <text>DoWhileStatementNode</text>
		                break;
		            case SyntaxKind.TryStatementCatchNode:
		                <text>TryStatementCatchNode</text>
		                break;
		            case SyntaxKind.TryStatementFinallyNode:
		                <text>TryStatementFinallyNode</text>
		                break;
		            case SyntaxKind.LockStatementNode:
		                <text>LockStatementNode</text>
		                break;
		            case SyntaxKind.TryStatementTryNode:
		                <text>TryStatementTryNode</text>
		                break;
		            case SyntaxKind.UsingStatementCodeBlockNode:
		                <text>UsingStatementCodeBlockNode</text>
		                break;
		            case SyntaxKind.LambdaExpressionNode:
		                <text>LambdaExpressionNode</text>
		                break;
		            case SyntaxKind.GetterOrSetterNode:
		                <text>GetterOrSetterNode</text>
		                break;
		            case SyntaxKind.ArbitraryCodeBlockNode:
		                <text>ArbitraryCodeBlockNode</text>
		                break;
		            case SyntaxKind.GlobalCodeBlockNode:
		                <text>GlobalCodeBlockNode</text>
		                break;
	                default:
	                    <text>???</text>
	                    break;
			    }
			}
			else
			{
				<ErrorBoundary>
					@switch (codeBlockOwnerLocal.SyntaxKind)
					{
						case SyntaxKind.FunctionDefinitionNode:
							var functionDefinitionNode = (FunctionDefinitionNode)codeBlockOwnerLocal;
							<text>
								@IconSymbolMethodFragment.Render(iconDriver)
								@(GetText(functionDefinitionNode.FunctionIdentifierToken.TextSpan, componentData))(...)
							</text>
							break;
						case SyntaxKind.ConstructorDefinitionNode:
							var constructorDefinitionNode = (ConstructorDefinitionNode)codeBlockOwnerLocal;
							<text>
								@IconBlankFragment.Render(iconDriver)
								@(GetText(constructorDefinitionNode.FunctionIdentifier.TextSpan, componentData))(...)
							</text>
							break;
						case SyntaxKind.TypeDefinitionNode:
							var typeDefinitionNode = (TypeDefinitionNode)codeBlockOwnerLocal;
							<text>
								@IconSymbolClassFragment.Render(iconDriver)
								@GetText(typeDefinitionNode.TypeIdentifierToken.TextSpan, componentData)
							</text>
							break;
						case SyntaxKind.NamespaceStatementNode:
							var namespaceStatementNode = (NamespaceStatementNode)codeBlockOwnerLocal;
							<text>
								@IconBlankFragment.Render(iconDriver)
								@GetText(namespaceStatementNode.IdentifierToken.TextSpan, componentData)
							</text>
							break;
						default:
							<text>
								@IconBlankFragment.Render(iconDriver)
								@codeBlockOwnerLocal.SyntaxKind
							</text>
							break;
					}
				</ErrorBoundary>
			}
		</div>
	</div>
	
	<div style="justify-content: space-between; display: flex;">
	
		@{
	    	
	    }
		
		@if (showDefaultToolbarLocal)
		{
			<div class="di_te_compiler-service-header-dropdown">
				<TextEditorDefaultHeaderDisplay ComponentDataKey="ComponentDataKey"/>
			</div>
		}
	
		<button class="di_button"
				title="Toggle Default Toolbar"
				@onclick="ToggleDefaultToolbar">
			
			@if (showDefaultToolbarLocal)
			{
				@IconChevronDownFragment.Render(iconDriver)
			}
			else
			{
				@IconChevronRightFragment.Render(iconDriver)
			}
		</button>
	</div>
</div>