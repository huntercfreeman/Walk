@using Walk.Extensions.CompilerServices.Syntax
@using Walk.Extensions.CompilerServices.Syntax.Nodes
@using Walk.TextEditor.RazorLib.TextEditors.Displays.Internals

@{
	var componentData = GetComponentData();
}

<div class="di_te_text-editor-header @componentData?.WrapperCssClass di_te_compiler-service-header"
     style="@componentData?.WrapperCssStyle">
	 
	@{
		var showDefaultToolbarLocal = _showDefaultToolbar;
		
		var appOptionsState = TextEditorService.CommonService.GetAppOptionsState();
		
		var iconDriver = new IconDriver(
			appOptionsState.Options.IconSizeInPixels,
			appOptionsState.Options.IconSizeInPixels);
	}
	
	<div style="justify-content: space-between; display: flex;">
		<div title="ICodeBlockOwner">
			@{
			    // These change within a background task.
			    var syntaxKind = _syntaxKind;
		    }
			
			<ErrorBoundary>
			    @switch (syntaxKind)
			    {
			        case SyntaxKind.IfStatementNode:
			            <text>
			                @IconBlankFragment.Render(iconDriver)
			                IfStatementNode
		                </text>
			            break;
		            case SyntaxKind.WhileStatementNode:
		                <text>
		                    @IconBlankFragment.Render(iconDriver)
		                    WhileStatementNode
		                </text>
		                break;
		            case SyntaxKind.ForStatementNode:
		                <text>
		                    @IconBlankFragment.Render(iconDriver)
		                    ForStatementNode
		                </text>
		                break;
		            case SyntaxKind.ForeachStatementNode:
		                <text>
		                    @IconBlankFragment.Render(iconDriver)
		                    ForeachStatementNode
		                </text>
		                break;
		            case SyntaxKind.SwitchStatementNode:
		                <text>
		                    @IconBlankFragment.Render(iconDriver)
		                    SwitchStatementNode
		                </text>
		                break;
		            case SyntaxKind.DoWhileStatementNode:
		                <text>
		                    @IconBlankFragment.Render(iconDriver)
		                    DoWhileStatementNode
		                </text>
		                break;
		            case SyntaxKind.TryStatementCatchNode:
		                <text>
		                    @IconBlankFragment.Render(iconDriver)
		                    TryStatementCatchNode
		                </text>
		                break;
		            case SyntaxKind.TryStatementFinallyNode:
		                <text>
		                    @IconBlankFragment.Render(iconDriver)
		                    TryStatementFinallyNode
		                </text>
		                break;
		            case SyntaxKind.LockStatementNode:
		                <text>
		                    @IconBlankFragment.Render(iconDriver)
		                    LockStatementNode
		                </text>
		                break;
		            case SyntaxKind.TryStatementTryNode:
		                <text>
		                    @IconBlankFragment.Render(iconDriver)
		                    TryStatementTryNode
		                </text>
		                break;
		            case SyntaxKind.UsingStatementCodeBlockNode:
		                <text>
	                        @IconBlankFragment.Render(iconDriver)
	                        UsingStatementCodeBlockNode
	                    </text>
		                break;
		            case SyntaxKind.LambdaExpressionNode:
		                <text>
		                    @IconBlankFragment.Render(iconDriver)
		                    LambdaExpressionNode
	                    </text>
		                break;
		            case SyntaxKind.GetterOrSetterNode:
		                <text>
		                    @IconBlankFragment.Render(iconDriver)
		                    GetterOrSetterNode
	                    </text>
		                break;
		            case SyntaxKind.ArbitraryCodeBlockNode:
		                <text>
		                    @IconBlankFragment.Render(iconDriver)
		                    ArbitraryCodeBlockNode
	                    </text>
		                break;
		            case SyntaxKind.GlobalCodeBlockNode:
		                <text>
		                    @IconBlankFragment.Render(iconDriver)
		                    GlobalCodeBlockNode
	                    </text>
		                break;
		            case SyntaxKind.FunctionDefinitionNode:
						<text>
							@IconSymbolMethodFragment.Render(iconDriver)
							@(GetText(_identifierTextSpan, componentData))(...)
						</text>
						break;
					case SyntaxKind.ConstructorDefinitionNode:
						<text>
							@IconBlankFragment.Render(iconDriver)
							@(GetText(_identifierTextSpan, componentData))(...)
						</text>
						break;
					case SyntaxKind.TypeDefinitionNode:
						<text>
							@IconSymbolClassFragment.Render(iconDriver)
							@GetText(_identifierTextSpan, componentData)
						</text>
						break;
					case SyntaxKind.NamespaceStatementNode:
						<text>
							@IconBlankFragment.Render(iconDriver)
							@GetText(_identifierTextSpan, componentData)
						</text>
						break;
	                default:
	                    <text>
	                        @IconBlankFragment.Render(iconDriver)
	                        ???
                        </text>
	                    break;
			    }
		    </ErrorBoundary>
		</div>
	</div>
	
	<div style="justify-content: space-between; display: flex;">
	
		@{
	    	
	    }
		
		@if (showDefaultToolbarLocal)
		{
			<div class="di_te_compiler-service-header-dropdown">
				<TextEditorDefaultHeaderDisplay ComponentDataKey="ComponentDataKey"/>
			</div>
		}
	
		<button class="di_button"
				title="Toggle Default Toolbar"
				@onclick="ToggleDefaultToolbar">
			
			@if (showDefaultToolbarLocal)
			{
				@IconChevronDownFragment.Render(iconDriver)
			}
			else
			{
				@IconChevronRightFragment.Render(iconDriver)
			}
		</button>
	</div>
</div>