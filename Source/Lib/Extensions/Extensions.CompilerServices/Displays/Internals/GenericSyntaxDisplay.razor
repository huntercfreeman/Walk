@using Walk.Extensions.CompilerServices.Syntax
@using Walk.Extensions.CompilerServices.Syntax.NodeValues
@using Walk.Extensions.CompilerServices.Syntax.NodeReferences
@using Walk.TextEditor.RazorLib.TextEditors.Models.Internals

@*
    I'm making changes to the C# Compiler Service storage.
    I encountered an infinite loop in the UI when I hovered a certain generic variable.
    The TypeSyntaxDisplay was rendering GenericSyntaxDisplay which then rendered TypeSyntaxDisplay, repeat...
    This spiked my memory, I was able to stop the app with Task Manager, but I want to avoid this happening again at all costs until I am 100% certain
    the new storage won't have an infinite loop in the UI.
*@
@if (SyntaxViewModel.Depth < 6)
{
    var syntaxViewModelLocal = SyntaxViewModel;
    int indexGenericParameterEntryList = -1;
    int countGenericParameterEntryList = 0;

    //if (syntaxViewModelLocal.TargetNode is IGenericParameterNode genericParameterNode &&
    //    genericParameterNode.IndexGenericParameterEntryList != -1)
    //{
    //    indexGenericParameterEntryList = genericParameterNode.IndexGenericParameterEntryList;
    //    countGenericParameterEntryList = genericParameterNode.CountGenericParameterEntryList;
    //}
    //else
    //{
        if (!TypeReference.IsDefault() &&
            TypeReference.OpenAngleBracketToken.ConstructorWasInvoked)
        {
            indexGenericParameterEntryList = TypeReference.OffsetGenericParameterEntryList;
            countGenericParameterEntryList = TypeReference.LengthGenericParameterEntryList;
        }
    //}

    if (indexGenericParameterEntryList != -1 && SyntaxViewModel.ExtendedCompilerService is not null)
    {
        <text>&lt;</text>

        for (int index = indexGenericParameterEntryList; index < indexGenericParameterEntryList + countGenericParameterEntryList; index++)
        {
            var genericParameter = SyntaxViewModel.ExtendedCompilerService.GenericParameterEntryList[index];

            var syntaxViewModel = new SyntaxViewModel(
                SyntaxViewModel.ExtendedCompilerService,
                SyntaxViewModel.TextEditorService,
                SyntaxViewModel.ResourceUri,
                targetSymbol: default,
                targetNode: default,
                definitionNode: default,
                depth: syntaxViewModelLocal.Depth + 1);
            <TypeSyntaxDisplay SyntaxViewModel="syntaxViewModel" TypeReference="genericParameter.TypeReference"/>

            if (index < indexGenericParameterEntryList + countGenericParameterEntryList - 1)
            {
                <text>,</text>
            }
        }

        <text>&gt;</text>
    }
}