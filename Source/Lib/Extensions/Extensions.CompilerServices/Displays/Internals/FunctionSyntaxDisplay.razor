@using Walk.TextEditor.RazorLib.TextEditors.Models.Internals
@using Walk.Extensions.CompilerServices.Syntax
@using Walk.Extensions.CompilerServices.Syntax.Nodes
@using Walk.Extensions.CompilerServices.Syntax.Nodes.Enums

@{
	var syntaxViewModelLocal = SyntaxViewModel;
	
	string? prefixText;
	
	// Hacky addition of 'string? returnTypeClauseNodeText' due to a ConstructorSymbol just being the identifier, not a node.
	TypeReference returnTypeClauseNode;
	string? returnTypeClauseNodeText;
	
	string? methodName;
	bool hasGenericParameterListing;
	FunctionArgumentListing? functionArgumentListing;
	bool isConstructorInvocation = false;
	
	if (syntaxViewModelLocal.DefinitionNode is null && syntaxViewModelLocal.TargetNode is null && syntaxViewModelLocal.TargetSymbol is null)
	{
		prefixText = "(null)";
		returnTypeClauseNode = default;
		returnTypeClauseNodeText = null;
		methodName = null;
		hasGenericParameterListing = false;
		functionArgumentListing = null;
	}
	else if (syntaxViewModelLocal.DefinitionNode is not null &&
			 (syntaxViewModelLocal.DefinitionNode.SyntaxKind == SyntaxKind.FunctionDefinitionNode ||
			  	syntaxViewModelLocal.DefinitionNode.SyntaxKind == SyntaxKind.ConstructorDefinitionNode))
	{
		prefixText = null;
		
		if (syntaxViewModelLocal.DefinitionNode.SyntaxKind == SyntaxKind.FunctionDefinitionNode)
		{
			var functionDefinitionNode = (FunctionDefinitionNode)syntaxViewModelLocal.DefinitionNode;
			returnTypeClauseNode = functionDefinitionNode.ReturnTypeReference;
			returnTypeClauseNodeText = null;
			methodName = syntaxViewModelLocal.GetIdentifierText(functionDefinitionNode);
			hasGenericParameterListing = functionDefinitionNode.OpenAngleBracketToken.ConstructorWasInvoked;
			functionArgumentListing = functionDefinitionNode.FunctionArgumentListing;
		}
		else if (syntaxViewModelLocal.DefinitionNode.SyntaxKind == SyntaxKind.ConstructorDefinitionNode)
		{
			var constructorDefinitionNode = (ConstructorDefinitionNode)syntaxViewModelLocal.DefinitionNode;
			returnTypeClauseNode = constructorDefinitionNode.ReturnTypeReference;
			returnTypeClauseNodeText = null;
			methodName = null;
			hasGenericParameterListing = false;
			functionArgumentListing = constructorDefinitionNode.FunctionArgumentListing;
		}
		else
		{
			returnTypeClauseNode = default;
			returnTypeClauseNodeText = null;
			methodName = "unknown syntax";
			hasGenericParameterListing = false;
			functionArgumentListing = null;
		}
	}
	else if (syntaxViewModelLocal.TargetNode is not null &&
			 (syntaxViewModelLocal.TargetNode.SyntaxKind == SyntaxKind.FunctionInvocationNode ||
			  	syntaxViewModelLocal.TargetNode.SyntaxKind == SyntaxKind.ConstructorInvocationExpressionNode))
	{
		prefixText = "(reference)";
		
		if (syntaxViewModelLocal.TargetNode.SyntaxKind == SyntaxKind.FunctionInvocationNode)
		{
			var functionInvocationNode = (FunctionInvocationNode)syntaxViewModelLocal.TargetNode;
			returnTypeClauseNode = functionInvocationNode.ResultTypeReference;
			returnTypeClauseNodeText = null;
			methodName = syntaxViewModelLocal.GetIdentifierText(functionInvocationNode);
			hasGenericParameterListing = functionInvocationNode.OpenAngleBracketToken.ConstructorWasInvoked;
			functionArgumentListing = null;
		}
		else if (syntaxViewModelLocal.TargetNode.SyntaxKind == SyntaxKind.ConstructorInvocationExpressionNode)
		{
			var constructorInvocationNode = (ConstructorInvocationExpressionNode)syntaxViewModelLocal.TargetNode;
			returnTypeClauseNode = constructorInvocationNode.ResultTypeReference;
			returnTypeClauseNodeText = null;
			methodName = null;
			hasGenericParameterListing = false;
			functionArgumentListing = null;
		}
		else
		{
			returnTypeClauseNode = default;
			returnTypeClauseNodeText = null;
			methodName = "unknown syntax";
			hasGenericParameterListing = false;
			functionArgumentListing = null;
		}
	}
	else if (syntaxViewModelLocal.TargetSymbol is not null &&
			 (syntaxViewModelLocal.TargetSymbol.Value.SyntaxKind == SyntaxKind.FunctionSymbol ||
			  	syntaxViewModelLocal.TargetSymbol.Value.SyntaxKind == SyntaxKind.ConstructorSymbol))
	{
		prefixText = "(symbol)";
	
		if (syntaxViewModelLocal.TargetSymbol.Value.SyntaxKind == SyntaxKind.FunctionSymbol)
		{
			returnTypeClauseNode = default;
			returnTypeClauseNodeText = null;
			methodName = syntaxViewModelLocal.GetTextFromTextSpan(syntaxViewModelLocal.TargetSymbol.Value.TextSpan);
			hasGenericParameterListing = false;
			functionArgumentListing = null;
		}
		else if (syntaxViewModelLocal.TargetSymbol.Value.SyntaxKind == SyntaxKind.ConstructorSymbol)
		{
			returnTypeClauseNode = default;
			returnTypeClauseNodeText = syntaxViewModelLocal.GetTextFromTextSpan(syntaxViewModelLocal.TargetSymbol.Value.TextSpan);
			methodName = null;
			hasGenericParameterListing = false;
			functionArgumentListing = null;
		}
		else
		{
			returnTypeClauseNode = default;
			returnTypeClauseNodeText = null;
			methodName = null;
			hasGenericParameterListing = false;
			functionArgumentListing = null;
		}
	}
	else
	{
		prefixText = "(unrecognizable-state)";
		returnTypeClauseNode = default;
		returnTypeClauseNodeText = null;
		methodName = null;
		hasGenericParameterListing = false;
		functionArgumentListing = null;
	}
}

<span style="display: inline-flex;">
	
	@if (syntaxViewModelLocal.Depth == 0 && !string.IsNullOrWhiteSpace(prefixText))
	{
		<span>
			@prefixText&nbsp;
		</span>
	}
	
	@if (returnTypeClauseNode != default(TypeReference))
	{
		var syntaxViewModel = new SyntaxViewModel(
		    SyntaxViewModel.ExtendedCompilerService,
		    SyntaxViewModel.TextEditorService,
		    SyntaxViewModel.ResourceUri,
			targetSymbol: null,
			targetNode: null,
			definitionNode: null,
			depth: syntaxViewModelLocal.Depth + 1);
		<TypeSyntaxDisplay SyntaxViewModel="syntaxViewModel" TypeReference="returnTypeClauseNode"/>
		<text>&nbsp;</text>
	}
	else if (!string.IsNullOrWhiteSpace(returnTypeClauseNodeText))
	{
		// Hacky addition of 'string? returnTypeClauseNodeText' due to a ConstructorSymbol just being the identifier, not a node.
		<span class="di_te_type">
			@returnTypeClauseNodeText
		</span>
	}
	
	@if (!string.IsNullOrWhiteSpace(methodName))
	{
		var classCssString = syntaxViewModelLocal.DefinitionNode is null
			? string.Empty
			: "di_te_syntax-onclick";
	
		<span class="@classCssString di_te_method"
			  @onclick="() => syntaxViewModelLocal.HandleOnClick(TextEditorService, SyntaxKind.FunctionDefinitionNode)">
			@methodName
		</span>
	}
	
	@if (hasGenericParameterListing)
	{
		var syntaxViewModel = new SyntaxViewModel(
		    SyntaxViewModel.ExtendedCompilerService,
		    SyntaxViewModel.TextEditorService,
		    SyntaxViewModel.ResourceUri,
			targetSymbol: null,
			targetNode: syntaxViewModelLocal.TargetNode,
			definitionNode: syntaxViewModelLocal.DefinitionNode,
			depth: syntaxViewModelLocal.Depth + 1);
		<GenericSyntaxDisplay SyntaxViewModel="syntaxViewModel" />
	}
	
	@if (functionArgumentListing is null)
	{
		<text>()</text>
	}
	else
	{
		<text>(</text>
		@for (int index = 0; index < functionArgumentListing.Value.FunctionArgumentEntryList.Count; index++)
		{
			var argumentEntry = functionArgumentListing.Value.FunctionArgumentEntryList[index];
			
			if (argumentEntry.OptionalCompileTimeConstantToken.SyntaxKind != SyntaxKind.NotApplicable)
			{
			    <text>[</text>
			}
			
			string? argumentModifierText;
			switch (argumentEntry.ArgumentModifierKind)
			{
            	case ArgumentModifierKind.Out:
                    argumentModifierText = "out";
                    break;
                case ArgumentModifierKind.In:
                    argumentModifierText = "in";
                    break;
                case ArgumentModifierKind.Ref:
                    argumentModifierText = "ref";
                    break;
                case ArgumentModifierKind.Params:
                    argumentModifierText = "params";
                    break;
                case ArgumentModifierKind.This:
                    argumentModifierText = "this";
                    break;
                case ArgumentModifierKind.Readonly:
                    argumentModifierText = "readonly";
                    break;
                case ArgumentModifierKind.RefReadonly:
                    argumentModifierText = "ref readonly";
                    break;
                case ArgumentModifierKind.ReadonlyRef:
                    argumentModifierText = "readonly ref";
                    break;
                case ArgumentModifierKind.ThisRef:
                    argumentModifierText = "this ref";
                    break;
                case ArgumentModifierKind.RefThis:
                    argumentModifierText = "ref this";
                    break;
                default:
                    argumentModifierText = null;
                    break;
			}
			
			if (argumentModifierText is not null)
			{
			    <span class="di_te_keyword">
			        @(argumentModifierText)&nbsp;
			    </span>
			}
			
			var syntaxViewModel = new SyntaxViewModel(
    		    SyntaxViewModel.ExtendedCompilerService,
				SyntaxViewModel.TextEditorService,
				SyntaxViewModel.ResourceUri,
				targetSymbol: null,
				targetNode: argumentEntry.VariableDeclarationNode,
				definitionNode: argumentEntry.VariableDeclarationNode,
				depth: syntaxViewModelLocal.Depth + 1);
			<VariableSyntaxDisplay SyntaxViewModel="syntaxViewModel"/>
			
			if (argumentEntry.OptionalCompileTimeConstantToken.SyntaxKind != SyntaxKind.NotApplicable)
			{
			    <text>&nbsp;=&nbsp;</text>
			    
			    switch (argumentEntry.OptionalCompileTimeConstantToken.SyntaxKind)
			    {
			        case SyntaxKind.NullTokenKeyword:
			            <span class="di_te_keyword">@(GetTextFromTextSpan(argumentEntry.OptionalCompileTimeConstantToken.TextSpan))</span>
			            break;
			        case SyntaxKind.FalseTokenKeyword:
			            <span class="di_te_keyword">@(GetTextFromTextSpan(argumentEntry.OptionalCompileTimeConstantToken.TextSpan))</span>
			            break;
			        case SyntaxKind.TrueTokenKeyword:
			            <span class="di_te_keyword">@(GetTextFromTextSpan(argumentEntry.OptionalCompileTimeConstantToken.TextSpan))</span>
			            break;
			        case SyntaxKind.StringLiteralToken:
			            <span class="di_te_string-literal">@(GetTextFromTextSpan(argumentEntry.OptionalCompileTimeConstantToken.TextSpan))</span>
			            break;
		            case SyntaxKind.CharLiteralToken:
			            <span class="di_te_string-literal">@(GetTextFromTextSpan(argumentEntry.OptionalCompileTimeConstantToken.TextSpan))</span>
			            break;
		            case SyntaxKind.NumericLiteralToken:
			            <span class="di_te_numeric-literal">@(GetTextFromTextSpan(argumentEntry.OptionalCompileTimeConstantToken.TextSpan))</span>
			            break;
		            default:
			            <text>...</text>
			            break;
			    }
			    
			    <text>]</text>
			}
			
			if (index < functionArgumentListing.Value.FunctionArgumentEntryList.Count - 1)
			{
				<text>, </text>
			}
		}
		<text>)</text>
	}
</span>