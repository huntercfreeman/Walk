@using Walk.TextEditor.RazorLib.TextEditors.Models.Internals
@using Walk.Extensions.CompilerServices.Syntax
@using Walk.Extensions.CompilerServices.Syntax.Nodes
@using Walk.Extensions.CompilerServices.Syntax.Nodes.Enums

@*
    I'm making changes to the C# Compiler Service storage.
    I encountered an infinite loop in the UI when I hovered a certain generic variable.
    The TypeSyntaxDisplay was rendering GenericSyntaxDisplay which then rendered TypeSyntaxDisplay, repeat...
    This spiked my memory, I was able to stop the app with Task Manager, but I want to avoid this happening again at all costs until I am 100% certain
    the new storage won't have an infinite loop in the UI.
*@
@if (SyntaxViewModel.Depth < 6)
{
	var syntaxViewModelLocal = SyntaxViewModel;
	
	string? prefixText;
	string? text;
	string? textCssClass;
	VariableDeclarationNode? variableDeclarationNode;
	
	if (syntaxViewModelLocal.DefinitionNode is null && syntaxViewModelLocal.TargetNode is null && syntaxViewModelLocal.TargetSymbol is null)
	{
		prefixText = "(null)";
		text = null;
		textCssClass = "di_te_variable";
		variableDeclarationNode = null;
	}
	else if (syntaxViewModelLocal.DefinitionNode is not null && syntaxViewModelLocal.DefinitionNode.SyntaxKind == SyntaxKind.VariableDeclarationNode)
	{
		variableDeclarationNode = (VariableDeclarationNode)syntaxViewModelLocal.DefinitionNode;
		
		prefixText = string.Empty;
		text = syntaxViewModelLocal.GetIdentifierText(variableDeclarationNode);
		
		if (variableDeclarationNode.VariableKind == VariableKind.Field)
			textCssClass = "di_te_field";
		else if (variableDeclarationNode.VariableKind == VariableKind.Property)
			textCssClass = "di_te_property";
		else if (variableDeclarationNode.VariableKind == VariableKind.EnumMember)
			textCssClass = "di_te_property";
		else
			textCssClass = "di_te_variable";
		
		// 'variableDeclarationNode' was set at the start of code block.
	}
	else if (syntaxViewModelLocal.TargetNode is not null && syntaxViewModelLocal.TargetNode.SyntaxKind == SyntaxKind.VariableReferenceNode)
	{
		prefixText = "(reference)";
		text = syntaxViewModelLocal.GetIdentifierText(syntaxViewModelLocal.TargetNode);
		textCssClass = "di_te_variable";
		variableDeclarationNode = null;
	}
	else if (syntaxViewModelLocal.TargetSymbol is not null &&
			 (syntaxViewModelLocal.TargetSymbol.Value.SyntaxKind == SyntaxKind.VariableSymbol ||
			  	syntaxViewModelLocal.TargetSymbol.Value.SyntaxKind == SyntaxKind.FieldSymbol ||
			  	syntaxViewModelLocal.TargetSymbol.Value.SyntaxKind == SyntaxKind.PropertySymbol ||
			  	syntaxViewModelLocal.TargetSymbol.Value.SyntaxKind == SyntaxKind.EnumMemberSymbol))
	{
		prefixText = "(symbol)";
		text = syntaxViewModelLocal.GetTextFromTextSpan(syntaxViewModelLocal.TargetSymbol.Value.TextSpan);
		textCssClass = "di_te_variable";
		variableDeclarationNode = null;
	}
	else
	{
		prefixText = "(unrecognizable-state)";
		text = null;
		textCssClass = "di_te_variable";
		variableDeclarationNode = null;
	}
    
    <span>
    	@if (syntaxViewModelLocal.Depth == 0 && !string.IsNullOrWhiteSpace(prefixText))
    	{
    		<span>
    			@prefixText
    			&nbsp;
    		</span>
    	}
    	
    	@if (variableDeclarationNode is not null)
    	{
    		var syntaxViewModel = new SyntaxViewModel(
    		    SyntaxViewModel.ExtendedCompilerService,
    		    SyntaxViewModel.TextEditorService,
    		    SyntaxViewModel.ResourceUri,
    			targetSymbol: null,
    			targetNode: null,
    			definitionNode: null,
    			depth: syntaxViewModelLocal.Depth + 1);
        	<TypeSyntaxDisplay SyntaxViewModel="syntaxViewModel" TypeReference="variableDeclarationNode.TypeReference"/>
        	<text>&nbsp;</text>
        }
        else
        {
        	<span class="di_te_keyword">
        		undefined
        		&nbsp;
        	</span>
        }
    	
    	@if (!string.IsNullOrWhiteSpace(text))
    	{
    		var classCssString = syntaxViewModelLocal.DefinitionNode is null
    			? string.Empty
    			: "di_te_syntax-onclick";
    	
    		<span class="@classCssString @textCssClass"
    			  @onclick="() => syntaxViewModelLocal.HandleOnClick(TextEditorService, SyntaxKind.VariableDeclarationNode)">
    			@text
    		</span>
    	}
    	
    	@if (variableDeclarationNode is not null && variableDeclarationNode.VariableKind == VariableKind.Property)
        {
        	<span>
            	{
            	
            	<text><span class="di_te_keyword"> get</span>;</text>
            	
            	@if (variableDeclarationNode.HasSetter)
            	{
            		<text><span class="di_te_keyword"> set</span>;</text>
            	}
            	
            	}
        	</span>
        }
    </span>
}
