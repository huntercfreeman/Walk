@using Walk.TextEditor.RazorLib.TextEditors.Models.Internals
@using Walk.Extensions.CompilerServices.Syntax
@using Walk.Extensions.CompilerServices.Syntax.Nodes

@*
    I'm making changes to the C# Compiler Service storage.
    I encountered an infinite loop in the UI when I hovered a certain generic variable.
    The TypeSyntaxDisplay was rendering GenericSyntaxDisplay which then rendered TypeSyntaxDisplay, repeat...
    This spiked my memory, I was able to stop the app with Task Manager, but I want to avoid this happening again at all costs until I am 100% certain
    the new storage won't have an infinite loop in the UI.
*@
@if (SyntaxViewModel.Depth < 6)
{
	var syntaxViewModelLocal = SyntaxViewModel;
	
	string? prefixText;
	string? text;
	
	if (syntaxViewModelLocal.DefinitionNode.IsDefault() && syntaxViewModelLocal.TargetNode.IsDefault() && syntaxViewModelLocal.TargetSymbol.IsDefault())
	{
		prefixText = "(null)";
		text = null;
	}
	else if (!syntaxViewModelLocal.DefinitionNode.IsDefault() && syntaxViewModelLocal.DefinitionNode.SyntaxKind == SyntaxKind.VariableDeclarationNode)
	{
		prefixText = "(definition)";
		text = "unknown state";
	}
	else if (!syntaxViewModelLocal.TargetNode.IsDefault() && syntaxViewModelLocal.TargetNode.SyntaxKind == SyntaxKind.VariableReferenceNode)
	{
		prefixText = "(reference)";
		text = "unknown state";
	}
	else if (!syntaxViewModelLocal.TargetSymbol.IsDefault() &&
			 (syntaxViewModelLocal.TargetSymbol.SyntaxKind == SyntaxKind.StringInterpolationSymbol ||
			  	syntaxViewModelLocal.TargetSymbol.SyntaxKind == SyntaxKind.StringVerbatimSymbol))
	{
		if (syntaxViewModelLocal.TargetSymbol.SyntaxKind == SyntaxKind.StringInterpolationSymbol)
		{
			prefixText = "(string-interpolation)";
		}
		else if (syntaxViewModelLocal.TargetSymbol.SyntaxKind == SyntaxKind.StringVerbatimSymbol)
		{
        	prefixText = "(string-verbatim)";
		}
		else if (syntaxViewModelLocal.TargetSymbol.SyntaxKind == SyntaxKind.InjectedLanguageComponentSymbol)
		{
        	prefixText = "(component)";
		}
		else
		{
			prefixText = "(symbol)";
		}
		
		text = syntaxViewModelLocal.GetTextFromTextSpan(syntaxViewModelLocal.TargetSymbol.TextSpan);
	}
	else
	{
		prefixText = "(unrecognizable-state)";
		text = null;
	}
    
    <span>
        <span class="di_keyword">
            @prefixText
        </span>
    
    	@if (text is not null)
    	{
    		<span class="di_string">
    	        @text
    	    </span>
    	}
    </span>
}
