@using Microsoft.AspNetCore.Components.Web
@using Walk.TextEditor.RazorLib.TextEditors.Models.Internals
@using Walk.TextEditor.RazorLib.CompilerServices
@using Walk.TextEditor.RazorLib.Lexers.Models
@using Walk.Extensions.CompilerServices.Syntax
@using Walk.Extensions.CompilerServices.Syntax.NodeValues
@using Walk.Extensions.CompilerServices.Syntax.NodeReferences
@using Walk.Extensions.CompilerServices.Displays.Internals

@{
	var symbolLocal = Symbol;
	// var targetNode = GetTargetNode(TextEditorService, symbolLocal, ResourceUri);
	var definitionNode = GetDefinitionNodeValue(TextEditorService, symbolLocal, default, ResourceUri);
	
	ResourceUri resourceUri;
	
	if (definitionNode.IsDefault())
	{
    	resourceUri = ResourceUri;
	}
	else
	{
	    switch (definitionNode.SyntaxKind)
    	{
    	    case SyntaxKind.VariableDeclarationNode:
            	var variableDeclarationNode = definitionNode;
            	resourceUri = variableDeclarationNode.ResourceUri;
            	break;
            case SyntaxKind.FunctionDefinitionNode:
            	var functionDefinitionNode = definitionNode;
            	resourceUri = functionDefinitionNode.ResourceUri;
            	break;
            case SyntaxKind.TypeDefinitionNode:
            	var innerTypeDefinitionNode = definitionNode;
            	resourceUri = innerTypeDefinitionNode.ResourceUri;
            	break;
    	    default:
    	        resourceUri = ResourceUri;
    	        break;
    	}
	}
	
	IExtendedCompilerService compilerService;
	
	var model = TextEditorService.Model_GetOrDefault(ResourceUri);
	
	if (model is not null && model.PersistentState.CompilerService is IExtendedCompilerService extendedCompilerService)
	{
	    compilerService = extendedCompilerService;
    }
    else
    {
        compilerService = null;
	}
	
	var syntaxViewModel = new SyntaxViewModel(
	    compilerService,
	    TextEditorService,
	    resourceUri,
		symbolLocal,
		default,
		definitionNode,
		depth: 0);
}

@if (syntaxViewModel.ExtendedCompilerService is null)
{
}
else
{
    <div class="di_te_symbol">
    	<ErrorBoundary>
    		<ChildContent>
    		    @switch (symbolLocal.SymbolKindString)
    		    {
    		        case "TypeSymbol":
    		        {
    			        <TypeSyntaxDisplay SyntaxViewModel="syntaxViewModel"/>
    		            break;
    		        }
    		        case "FunctionSymbol":
    		        case "ConstructorSymbol":
    		        {
    		        	<FunctionSyntaxDisplay SyntaxViewModel="syntaxViewModel"/>
    		            break;
    		        }
    		        case "LambdaSymbol":
    		        {
    		            <LambdaSyntaxDisplay SyntaxViewModel="syntaxViewModel"/>
    		            break;
    		        }
    		        case "VariableSymbol":
    		        case "FieldSymbol":
    		        case "PropertySymbol":
    		        case "EnumMemberSymbol":
    		        {
    		        	<VariableSyntaxDisplay SyntaxViewModel="syntaxViewModel"/>
    		            break;
    		        }
    		        case "StringInterpolationSymbol":
    		        case "StringVerbatimSymbol":
    		        case "InjectedLanguageComponentSymbol":
    				{
    		            <MiscSyntaxDisplay SyntaxViewModel="syntaxViewModel"/>
    		            break;
    		        }
    		        case "NamespaceSymbol":
    		        {
    		            <text>
    		                <span class="di_keyword">
    		                    namespace
    		                </span>
    		
    		                <span class="@(string.Empty /* Namespaces do not have their own css class as of (2023-07-20) */)">
    		                    @syntaxViewModel.GetTextFromTextSpan(symbolLocal.TextSpan)
    		                </span>
    		            </text>
    		            break;
    		        }
    		        case "LabelSymbol":
    		        {
    		            <text>
    		                <span class="di_keyword">
    		                    label
    		                </span>
    		
    		                <span class="@(string.Empty /* Labels do not have their own css class as of (2023-07-20) */)">
    		                    @syntaxViewModel.GetTextFromTextSpan(symbolLocal.TextSpan)
    		                </span>
    		            </text>
    		            break;
    		        }
    		        case "DiscardSymbol":
    		        {
    		        	<text>
    		                <span class="di_keyword">
    		                    discard
    		                </span>
    		
    		                <span class="@(string.Empty /* Discards do not have their own css class as of (2023-07-20) */)">
    		                    @syntaxViewModel.GetTextFromTextSpan(symbolLocal.TextSpan)
    		                </span>
    		            </text>
    		            break;
    		        }
    		        case "SourceFileSymbol":
    		        {
    		            <text>
    		                <span class="di_keyword">
    		                    Open in editor:
    		                </span>
    		
    		                <button class="di_button di_te_source-file"
    		                        @onclick="() => OpenInEditorOnClick(syntaxViewModel.GetTextFromTextSpan(symbolLocal.TextSpan))">
    		                    @syntaxViewModel.GetTextFromTextSpan(symbolLocal.TextSpan)
    		                </button>
    		            </text>
    		            break;
    		        }
    		        default:
    		        {
    		            <text>
    		                <span class="di_keyword">
    		                    unknown-symbol-kind
    		                </span>
    		
    		                <span class="@(string.Empty /* Unknown-symbol-kinds do not have their own css class as of (2023-07-20) */)">
    		                    @syntaxViewModel.GetTextFromTextSpan(symbolLocal.TextSpan)
    		                </span>
    		            </text>
    		            break;
    		        }
    		    }
    		</ChildContent>
    		<ErrorContent Context="error">
    			@error.ToString()
    		</ErrorContent>
    	</ErrorBoundary>
    </div>
}
