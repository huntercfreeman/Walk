@using Walk.Common.RazorLib
@using Walk.Common.RazorLib.Keys.Models
@using Walk.Ide.RazorLib.Terminals.Models;

@* ContextRecord="ContextFacts.TerminalContext" *@
<div class="di_ide_terminal" style="height: 100%; width: 100%; overflow: auto;">
    @{
        var terminalGroupDisplayState = IdeService.GetTerminalGroupState();
        var terminalState = IdeService.GetTerminalState();

        _ = terminalState.TerminalMap.TryGetValue(
                terminalGroupDisplayState.ActiveTerminalKey,
                out var activeTerminal);
    }

    <div class="di_section-body">

        <div class="di_ide_terminal-body"
             style="@terminalGroupDisplayState.BodyElementDimensions.GetStyleString(IdeService.CommonService.UiStringBuilder)">

            @if (activeTerminal is null)
            {
                @: activeTerminal was null
            }
            else
            {
            	<TerminalOutputTextEditorExpandDisplay @key="activeTerminal.Key"
            										   Terminal="activeTerminal"/>
            }
        </div>

        <div class="di_resize-column"
             style="@IdeService.CommonService.Options_ResizeHandleCssWidth"
             @onmousedown="() => SubscribeToDragEvent()">
        </div>

        <div class="di_ide_terminal-tabs"
             style="@terminalGroupDisplayState.TabsElementDimensions.GetStyleString(IdeService.CommonService.UiStringBuilder)">
             
            @*
            Pause working on the integrated terminal for now.
            =================================================
            <button class="di_button"
            		style="margin-bottom: 15px;"
            		@onclick="AddIntegratedTerminalOnClick">
            	Add Integrated Terminal
            </button>
            *@
            
            @{
            	var terminalList = terminalState.TerminalMap.Values
            		.OrderByDescending(x => IdeFacts.WELL_KNOWN_KEYS.Contains(x.Key))
            		.ToArray();
            }
             
            @for (var i = 0; i < terminalList.Length; i++)
            {
                var index = i;
                var terminal = terminalList[index];

                string isActiveCssClass = string.Empty;
                if ((activeTerminal?.Key ?? Key<ITerminal>.Empty) == terminal.Key)
                    isActiveCssClass = "di_active";

                <button class="di_button @isActiveCssClass"
                        @onclick="() => DispatchSetActiveTerminalAction(terminal.Key)">

                    @terminal.DisplayName

                    @{ var isKillProcessDisabled = !terminal.HasExecutingProcess; }

                    <button class="di_button"
                            disabled=@isKillProcessDisabled
                            @onclick="() => terminal.KillProcess()"
                            @onclick:stopPropagation="true">
                        Kill
                    </button>
                    
                    <button class="di_button"
                    	    title="Clear inactive history"
                            @onclick="() => ClearTerminalOnClick(terminal.Key)"
                            @onclick:stopPropagation="true">
                        Clear
                    </button>

                    <div style="margin-left: 15px;">
                    
                    	@{
                    		var appOptionsState = IdeService.CommonService.GetAppOptionsState();
                    	
                    		var iconDriver = new IconDriver(
								appOptionsState.Options.IconSizeInPixels,
								appOptionsState.Options.IconSizeInPixels);
                    	}
                    
                        @if (terminal.HasExecutingProcess)
                        {
                            @IconLoadingFragment.Render(iconDriver)
                        }
                        else
                        {
                            @IconBlankFragment.Render(iconDriver)
                        }
                    </div>
                </button>

                if (i != terminalList.Length - 1)
                {
                    <text>
                        &nbsp;
                        &nbsp;
                        &nbsp;
                    </text>
                }
            }
        </div>
    </div>
</div>
