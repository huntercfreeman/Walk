@using Walk.Common.RazorLib.Contexts.Displays
@using Walk.Common.RazorLib.Contexts.Models;
@using Walk.Common.RazorLib.Dimensions.Models;
@using Walk.Common.RazorLib.Installations.Displays
@using Walk.Common.RazorLib.Panels.Displays
@using Walk.Common.RazorLib.Panels.Models;
@using Walk.Common.RazorLib.Resizes.Displays
@using Walk.Ide.RazorLib.Installations.Displays
@using Walk.Ide.RazorLib.Shareds.Displays.Internals
@using Walk.TextEditor.RazorLib.Installations.Displays

@* Start Body *@
@using Walk.Common.RazorLib.Dimensions.Models
@using Walk.Common.RazorLib.Panels.Displays
@using Walk.Common.RazorLib.Panels.Models
@using Walk.Common.RazorLib.Resizes.Displays
@using Walk.Common.RazorLib.StateHasChangedBoundaries.Displays
@using Walk.Ide.RazorLib.Editors.Displays
@* End Body *@

@inherits LayoutComponentBase

@{
    CreateCssStrings();
}

<ContextBoundary ContextRecord="ContextFacts.GlobalContext"
                 ClassCssString="@_classCssString"
                 StyleCssString="@_styleCssString">

    <Walk.Common.RazorLib.Drags.Displays.DragInitializer />
    <WalkCommonInitializer />
    <WalkTextEditorInitializer />
    <WalkIdeInitializer />

    <IdeHeader/>
    
    @* Start Body *@
    @{ var panelState = PanelService.GetPanelState(); }
    
    <div class="di_ide_body"
         style="@_bodyElementDimensions.GetStyleString(CommonBackgroundTaskApi.UiStringBuilder)">
    
        <PanelGroupDisplay PanelGroupKey="PanelFacts.LeftPanelGroupKey"
                           AdjacentElementDimensions="_editorElementDimensions"
                           DimensionAttributeKind="DimensionAttributeKind.Width"
                           ReRenderSelfAndAdjacentElementDimensionsFunc="() => InvokeAsync(StateHasChanged)" />
    
        <ResizableColumn LeftElementDimensions="PanelFacts.GetTopLeftPanelGroup(panelState).ElementDimensions"
                         RightElementDimensions="_editorElementDimensions"
                         ReRenderFuncAsync="() => InvokeAsync(StateHasChanged)" />
    
        <EditorDisplay EditorElementDimensions="_editorElementDimensions" />
        
        <ResizableColumn LeftElementDimensions="_editorElementDimensions"
                         RightElementDimensions="PanelFacts.GetTopRightPanelGroup(panelState).ElementDimensions"
                         ReRenderFuncAsync="() => InvokeAsync(StateHasChanged)" />
    
        <PanelGroupDisplay PanelGroupKey="PanelFacts.RightPanelGroupKey"
                           AdjacentElementDimensions="_editorElementDimensions"
                           DimensionAttributeKind="DimensionAttributeKind.Width"
                           ReRenderSelfAndAdjacentElementDimensionsFunc="() => InvokeAsync(StateHasChanged)" />
    </div>
    @* End Body *@
    <IdeBody BodyElementDimensions="_bodyElementDimensions" />

    <ResizableRow TopElementDimensions="_bodyElementDimensions"
                  BottomElementDimensions="PanelFacts.GetBottomPanelGroup(PanelService.GetPanelState()).ElementDimensions"
                  ReRenderFuncAsync="() => InvokeAsync(StateHasChanged)" />

    <PanelGroupDisplay PanelGroupKey="PanelFacts.BottomPanelGroupKey"
                  CssClassString="di_ide_footer"
                  AdjacentElementDimensions="_bodyElementDimensions"
                  DimensionAttributeKind="DimensionAttributeKind.Height"
                  ReRenderSelfAndAdjacentElementDimensionsFunc="() => InvokeAsync(StateHasChanged)">

        <JustifyEndRenderFragment>
        	@{ var ideMainLayoutState = IdeMainLayoutService.GetIdeMainLayoutState(); }
        	
        	@foreach (var footerJustifyEndComponent in ideMainLayoutState.FooterJustifyEndComponentList)
        	{
        		<DynamicComponent Type="footerJustifyEndComponent.ComponentType"
        						  Parameters="footerJustifyEndComponent.ComponentParameterMap"/>
        	}
        </JustifyEndRenderFragment>
    </PanelGroupDisplay>
</ContextBoundary>