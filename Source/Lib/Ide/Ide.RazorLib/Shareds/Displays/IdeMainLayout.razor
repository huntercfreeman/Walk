@using Walk.Common.RazorLib.Contexts.Displays
@using Walk.Common.RazorLib.Contexts.Models
@using Walk.Common.RazorLib.Installations.Displays
@using Walk.Common.RazorLib.Panels.Displays
@using Walk.Common.RazorLib.Panels.Models
@using Walk.Common.RazorLib.Resizes.Displays
@using Walk.Common.RazorLib.Dimensions.Models
@using Walk.Common.RazorLib.StateHasChangedBoundaries.Displays
@using Walk.Common.RazorLib.Dropdowns.Displays
@using Walk.Common.RazorLib.Dropdowns.Models
@using Walk.Common.RazorLib.Installations.Models
@using Walk.Common.RazorLib.Menus.Displays
@using Walk.TextEditor.RazorLib.Installations.Displays
@using Walk.Ide.RazorLib.Editors.Displays
@using Walk.Ide.RazorLib.Shareds.Displays.Internals
@using Walk.Ide.RazorLib.Settings.Displays
@using Walk.Ide.RazorLib.StartupControls.Displays
@using Walk.Ide.RazorLib.Shareds.Models

@inherits LayoutComponentBase

@{
    CreateCssStrings();
}

@* ContextRecord="ContextFacts.GlobalContext" *@

<div id="@ContextFacts.GlobalContext.ContextElementId" class="@_classCssString" style="@_styleCssString">
    <Walk.Common.RazorLib.Drags.Displays.DragInitializer />
    <WalkCommonInitializer />
    <WalkTextEditorInitializer />

    @* Start Header *@
    @* ContextRecord="ContextFacts.MainLayoutHeaderContext" *@
    <div id="@ContextFacts.MainLayoutHeaderContext.ContextElementId" class="di_ide_header" style="@_headerCssStyle">
        <div class="di_ide_header-left-content"
             style="display: flex;">
            
            @* Start SettingsDialogEntryPoint *@
            <button class="di_button"
                    @onclick="async () => DispatchRegisterDialogRecordAction()">
                    
                @{
                	var appOptionsState = AppOptionsService.GetAppOptionsState();
                
                	var iconDriver = new IconDriver(
            			appOptionsState.Options.IconSizeInPixels,
            			appOptionsState.Options.IconSizeInPixels);
                }
                @IconSettingsGearFragment.Render(iconDriver)
            </button>
            @* End SettingsDialogEntryPoint *@
    
            <button @ref="_buttonFileElementReference"
                    @onclick="RenderFileDropdownOnClick"
    			    id="@IdeHeaderState.ButtonFileId"
                    class="di_button"
                    style="margin-left: 15px;">
                File
            </button>
    
    		<button @ref="_buttonToolsElementReference"
                    @onclick="RenderToolsDropdownOnClick"
    			    id="@IdeHeaderState.ButtonToolsId"
                    class="di_button"
                    style="margin-left: 15px;">
                Tools
            </button>
    
    		<button @ref="_buttonViewElementReference"
                    @onclick="RenderViewDropdownOnClick"
    			    id="@IdeHeaderState.ButtonViewId"
                    class="di_button"
                    style="margin-left: 15px;">
    			View
             </button>
    
    		<button @ref="_buttonRunElementReference"
                    @onclick="RenderRunDropdownOnClick"
    			    id="@IdeHeaderState.ButtonRunId"
    				class="di_button"
                    style="margin-left: 15px;">
                Run
            </button>
    
            <button class="di_button"
                    style="margin-left: 15px;"
                    @onclick="OpenInfoDialogOnClick">
                Info
            </button>
    
            <StartupControlDisplay/>
        </div>
    </div>
    @* End Header *@
    
    @* Start Body *@
    @{ var panelState = PanelService.GetPanelState(); }
    
    <div class="di_ide_body"
         style="@_bodyElementDimensions.GetStyleString(CommonBackgroundTaskApi.UiStringBuilder)">
    
        <PanelGroupDisplay PanelGroupKey="PanelFacts.LeftPanelGroupKey"
                           AdjacentElementDimensions="_editorElementDimensions"
                           DimensionAttributeKind="DimensionAttributeKind.Width"
                           ReRenderSelfAndAdjacentElementDimensionsFunc="() => InvokeAsync(StateHasChanged)" />
    
        <ResizableColumn LeftElementDimensions="PanelFacts.GetTopLeftPanelGroup(panelState).ElementDimensions"
                         RightElementDimensions="_editorElementDimensions"
                         ReRenderFuncAsync="() => InvokeAsync(StateHasChanged)" />
    
        <EditorDisplay EditorElementDimensions="_editorElementDimensions" />
        
        <ResizableColumn LeftElementDimensions="_editorElementDimensions"
                         RightElementDimensions="PanelFacts.GetTopRightPanelGroup(panelState).ElementDimensions"
                         ReRenderFuncAsync="() => InvokeAsync(StateHasChanged)" />
    
        <PanelGroupDisplay PanelGroupKey="PanelFacts.RightPanelGroupKey"
                           AdjacentElementDimensions="_editorElementDimensions"
                           DimensionAttributeKind="DimensionAttributeKind.Width"
                           ReRenderSelfAndAdjacentElementDimensionsFunc="() => InvokeAsync(StateHasChanged)" />
    </div>
    @* End Body *@

    <ResizableRow TopElementDimensions="_bodyElementDimensions"
                  BottomElementDimensions="PanelFacts.GetBottomPanelGroup(PanelService.GetPanelState()).ElementDimensions"
                  ReRenderFuncAsync="() => InvokeAsync(StateHasChanged)" />

    <PanelGroupDisplay PanelGroupKey="PanelFacts.BottomPanelGroupKey"
                       CssClassString="di_ide_footer"
                       AdjacentElementDimensions="_bodyElementDimensions"
                       DimensionAttributeKind="DimensionAttributeKind.Height"
                       ReRenderSelfAndAdjacentElementDimensionsFunc="() => InvokeAsync(StateHasChanged)"
                       BadgeList="IdeMainLayoutService.GetIdeMainLayoutState().FooterJustifyEndComponentList"/>
</div>
