@{
	var localStartupControlState = IdeService.GetIdeStartupControlState();
	var activeStartupControl = localStartupControlState.StartupControlList.FirstOrDefault(
    	    x => x.Key == localStartupControlState.ActiveStartupControlKey);
	bool isExecuting;

	if (activeStartupControl is null)
	{
		isExecuting = false;
	}
	else
	{
		isExecuting = activeStartupControl.IsExecuting;
	}
}

<div class="di_ide_startup-controls-display">
   <div class="di_ide_startup-controls-display-entry">
       <select @bind="SelectedStartupControlGuidString"
               title="Startup: @(activeStartupControl?.TitleVerbose)">
       	<option title="Choose startup project"
   			    value="@Guid.Empty.ToString()">
   	    	Choose startup project
   	    </option>
       
       	@foreach (var startupControl in localStartupControlState.StartupControlList)
       	{
       		<option title="@startupControl.TitleVerbose"
       			    value="@startupControl.Key.Guid.ToString()">
       	    	@startupControl.Title
       	    </option>
       	}
       </select>
       &nbsp;
  </div>
   <div class="di_ide_startup-controls-display-entry">
        <button @ref="_startButtonElementReference"
        	    @onclick="() => StartProgramWithoutDebuggingOnClick(isExecuting)"
                class="di_button"
                id="@_startButtonElementId"
                disabled=@(activeStartupControl is null)
                title="Start without debugging:  @(activeStartupControl?.TitleVerbose)">
            
            @{
            	var appOptionsState = IdeService.CommonService.GetAppOptionsState();
            
            	var iconDriver = new IconDriver(
					appOptionsState.Options.IconSizeInPixels,
					appOptionsState.Options.IconSizeInPixels);
            }
            
            @if (isExecuting)
            {
				@IconStopCircleFragment.Render(iconDriver)
            }
            else
            {
				@IconStartWithoutDebuggingFragment.Render(iconDriver)
            }
        </button>
   </div>
</div>
