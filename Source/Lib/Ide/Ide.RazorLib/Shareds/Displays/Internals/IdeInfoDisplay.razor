@using System.Reflection;

<div class="di_ide_info">

	<div>
        Source Code:
        <a target="_blank"
           href="https://github.com/Walk/Walk.Ide">
            
           Walk.Ide
        </a>
    </div>

	<hr/>

	<div>
        Entry Assembly:
		@{ var entryAssembly = System.Reflection.Assembly.GetEntryAssembly(); }
		<div>
			@{ var entryAssemblyName = entryAssembly.GetName(); }
            v
            <em class="di_em" title="Version">
                @(entryAssemblyName.Version)
            </em>
            ::
			@if (AssemblyCustomAttributeIsDebug(entryAssembly))
			{
				@: Debug
			}
			else
			{
				@: Release
			}
			::
            @entryAssemblyName.Name
        </div>
    </div>

	<div class="di_ide_info-main">
        Library:
    	@{ var ideAssembly = typeof(IdeInfoDisplay).Assembly; }
        <div>
			@{ var ideAssemblyName = ideAssembly.GetName(); }
            v
            <em class="di_em" title="Version">
                @(ideAssemblyName.Version)
            </em>
            ::
			@if (AssemblyCustomAttributeIsDebug(ideAssembly))
			{
				@: Debug
			}
			else
			{
				@: Release
			}
			::
            @ideAssemblyName.Name
        </div>
    </div>

	<hr/>

	<div>
		<table>
			<tr>
				<td>IsDebug_MethodConditionalAttribute_Test:</td>
				<td>@MethodConditionalAttributeIsDebug()</td>
			</tr>
			<tr>
				<td>IsDebug_Preprocessor_Test:</td>
				<td>@PreprocessorIsDebug()</td>
			</tr>
		</table>
	</div>

	<hr/>

	<div class="di_ide_info-references">
        <div>
            References
        </div>

        @{
            var referencedWalkAssembliesList = ideAssembly
                .GetReferencedAssemblies()
                .Where(x =>
					x.Name is not null &&
					(x.Name.StartsWith("Walk") ||
						x.Name.StartsWith("Fluxor") ||
						x.Name.StartsWith("Photino")))
				.OrderByDescending(x => x.Name.StartsWith("Walk"))
				.ToList();

			referencedWalkAssembliesList.AddRange(entryAssembly
                .GetReferencedAssemblies()
                .Where(x =>
					x.Name is not null &&
					x.Name.StartsWith("Photino")));
        }

        @foreach (var referencedWalkAssembly in referencedWalkAssembliesList)
        {
            if (referencedWalkAssembly.Name is null)
                continue;

            <div>
                v
                <em class="di_em" title="Version">
                    @(referencedWalkAssembly.Version)
                </em>
                ::
				@if (AssemblyCustomAttributeIsDebug(Assembly.Load(referencedWalkAssembly)))
				{
					@: Debug
				}
				else
				{
					@: Release
				}
				::
                @referencedWalkAssembly.Name
            </div>
        }
    </div>

	<hr/>
	
	@*<div>
		BackgroundTaskWorkers:
		<div>
			<div>
				ContinuousBackgroundTaskWorker: @(BackgroundTaskService.ContinuousTaskWorker.ExecuteTask?.Status.ToString() ?? "null")
			</div>
			<div>
				BlockingBackgroundTaskWorker: @(BackgroundTaskService.IndefiniteTaskWorker.ExecuteTask?.Status.ToString() ?? "null")
			</div>
		</div>
	</div>*@

	<hr/>
	
	<div>
        WalkHostingInformation:
		<div>
            <div>
                @nameof(CommonService.WalkHostingInformation.WalkHostingKind): @CommonService.WalkHostingInformation.WalkHostingKind
            </div>
            <div>
                @nameof(CommonService.WalkHostingInformation.WalkPurposeKind): @CommonService.WalkHostingInformation.WalkPurposeKind
            </div>
		</div>
	</div>
	
	<hr/>

	<div>
        Recent Changes:
		<div>
		    <div>
                <div>v <em class="di_em">55.0.0 </em> (2025-08-03)</div>
                <ul>
                    <li>
                        Draft PR
                    </li>
                    <li>
                        Fix: autocomplete focus
                    </li>
                    <li>
                        When autocompleteEntryList.Count == 0, show an "empty" menu option.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">54.0.0 </em> (2025-08-02)</div>
                <ul>
                    <li>
                        PathHelper.GetAbsoluteFromAbsoluteAndRelative(...) optimizations
                    </li>
                    <li>
                        TextEditor get inlined tabs
                    </li>
                    <li>
                        Panels get inlined tabs
                    </li>
                    <li>
                        Remove @@ref from layout buttons
                    </li>
                    <li>
                        Move FooterBadgeList
                    </li>
                    <li>
                        Dialog and Notification IsFixed="true"
                    </li>
                    <li>
                        Progress on AbsolutePath performance
                    </li>
                    <li>
                        UI optimizations for InputFileDialog,
                        still more to come.
                    </li>
                </ul>
            </div>
		    <div>
                <div>v <em class="di_em">53.0.0 </em> (2025-08-01)</div>
                <ul>
                    <li>
                        Clear cache after every parse.
                    </li>
                    <li>
                        Only store a single solution wide parse. (clear the previous ones).
                    </li>
                    <li>
                        TypeDefinitionNode.ToTypeReference() no allocations
                    </li>
                    <li>
                        Better support for C# primitive types.
                    </li>
                    <li>
                        Fix: typo in string pool
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">52.0.0 </em> (2025-07-31)</div>
                <ul>
                    <li>
                        Make CSharpCompilationUnit a struct
                    </li>
                    <li>
                        CSharpCompilationUnit: remove SourceText
                    </li>
                    <li>
                        Faster startup times (there is a storm going on I might lose power sometime tonight)
                    </li>
                    <li>
                        Fix badges
                    </li>
                    <li>
                        TreeViewContainerParameter.cs,
                        PanelGroupParameter.cs,
                        ResizableColumnParameter.cs,
                        ResizableRowParameter.cs
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">51.0.0 </em> (2025-07-30)</div>
                <ul>
                    <li>
                        Clear string pool
                    </li>
                    <li>
                        TreeView CSS caching
                    </li>
                    <li>
                        Change the TextEditorService string pool implementation.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">50.0.0 </em> (2025-07-29)</div>
                <ul>
                    <li>
                        No ResourceUri on C# CompilationUnit
                    </li>
                    <li>
                        No lists in C# CompilationUnit
                    </li>
                    <li>
                        Add a depth limit to the SymbolDisplay's child components.
                    </li>
                    <li>
                        Add to demo: I hovered this locally and got an infinite loop...
                    </li>
                    <li>
                        Fix generic UI infinite loop
                    </li>
                    <li>
                        progress on pooling AmbiguousParenthesizedExpressionNode and LambdaExpressionNode
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">49.0.0 </em> (2025-07-28)</div>
                <ul>
                    <li>
                        progress on pooling generics, function parameters, and function arguments.
                        I never clear the pool yet
                    </li>
                    <li>
                        C# Parser speed improvements / less object allocations
                    </li>
                </ul>
            </div>
		    <div>
                <div>v <em class="di_em">48.0.0 </em> (2025-07-27)</div>
                <ul>
                    <li>
                        Fix: generic parameter related var tooltip gibberish
                    </li>
                    <li>
                        Fix: var of undefined type tooltip is gibberish
                    </li>
                    <li>
                        C# Parser, faster reading of arbitrary text spans that are in the same file as the "compilation".
                        parserModel.GetTextSpanText(...).
                    </li>
                    <li>
                        Remove try finally in C# parser that shouldn't be here
                    </li>
                    <li>
                        Progress on supporting a single layer of inheritance
                    </li>
                    <li>
                        Cross partial referencing of the same type.
                    </li>
                    <li>
                        Fix NRE that was stopping CtrlTab when no editor was made yet (no text editor was opened yet in main editor).
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">47.0.0 </em> (2025-07-26)</div>
                <ul>
                    <li>
                        Ctrl Tab, Alt FTVR, some other keybinds.
                        Only when running natively to avoid clobbering the browser keybinds.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">46.0.0 </em> (2025-07-25)</div>
                <ul>
                    <li>
                        Measure the line height instead of hard coding 20px.
                    </li>
                    <li>
                        Rewrite MenuDisplay.razor
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">45.0.0 </em> (2025-07-24)</div>
                <ul>
                    <li>
                        Fix: Context menu is appearing at the "top" of the tree view regardless of the node you fired the event on / also ignoring scroll bar.
                    </li>
                    <li>
                        Input File mouse events
                    </li>
                    <li>
                        TreeView rewrite progress.
                    </li>
                </ul>
            </div>
		    <div>
                <div>v <em class="di_em">44.0.0 </em> (2025-07-23)</div>
                <ul>
                    <li>
                        If single file parse then make symbol per namespace prefix
                    </li>
                    <li>
                        Fix: namespace autocompletion
                    </li>
                    <li>
                        MemberAutocomplete simple case where filtering word is to left of cursor.
                        Don't insert entire word, skip the letters that are already there due to the filtering word.
                    </li>
                </ul>
            </div>
		    <div>
                <div>v <em class="di_em">43.0.0 </em> (2025-07-22)</div>
                <ul>
                    <li>
                        Less Func allocations when parsing.
                    </li>
                    <li>
                        Remove unnecessary injections
                    </li>
                    <li>
                        Remove some CollapsePoint logic that wasn't removed previously.
                    </li>
                    <li>
                        Remove try finally from FastParse
                    </li>
                    <li>
                        Synchronous file discovery
                    </li>
                    <li>
                        Delete RenderState.cs
                    </li>
                    <li>
                        Delete TreeViewMarkupString.cs
                    </li>
                    <li>
                        Delete WatchWindows
                    </li>
                    <li>
                        Remove context code
                    </li>
                    <li>
                        Inline background task queues
                    </li>
                    <li>
                        Inline background task workers
                    </li>
                    <li>
                        make common installation types structs where possible
                    </li>
                    <li>
                        Remove CommonService.Tooltip.cs MeasuredHtmlElementDimensions properties
                    </li>
                    <li>
                        Remove unused state from TextEditorVirtualizationResult
                    </li>
                    <li>
                        Delete Keymap_AllKeymapsList
                    </li>
                    <li>
                        struct ThemeRecord
                    </li>
                    <li>
                        Non-null settings
                    </li>
                    <li>
                        Faster TreeView Blazor parameters
                    </li>
                    <li>
                        Consolidate events
                    </li>
                </ul>
            </div>
		    <div>
                <div>v <em class="di_em">42.0.0 </em> (2025-07-21)</div>
                <ul>
                    <li>
                        Consolidate text editor events.
                    </li>
                    <li>
                        Remove old show title logic
                    </li>
                    <li>
                        Standardize C# files; 4 spaces, line feed, end with newline
                    </li>
                    <li>
                        I'm removing the collapse code. It isn't high enough quality,
                        and time spent making it higher quality isn't yet the right call.
                        Since there's so many other features that need quality improvements first.
                    </li>
                    <li>
                        Lessen the feature scope, focus on perfecting what you have.
                    </li>
                    <li>
                        TokenWalker avoid checks during release
                    </li>
                </ul>
            </div>
		    <div>
                <div>v <em class="di_em">41.0.0 </em> (2025-07-20)</div>
                <ul>
                    <li>
                        Fix non-qualified inheritance / implementation
                    </li>
                    <li>
                        Delete CSharpResource
                    </li>
                    <li>
                        Move ExternalTypeDefinitionList
                    </li>
                    <li>
                        Don't store lexer Lists
                    </li>
                    <li>
                        Consolidate static types that stored "facts" into a single class per project.
                        CommonFacts, TextEditorFacts, IdeFacts
                    </li>
                    <li>
                        Delete DotNetComponentRenderers
                    </li>
                    <li>
                        Delete IdeComponentRenderers
                    </li>
                    <li>
                        Delete TextEditorComponentRenderers
                    </li>
                    <li>
                        Delete CommonComponentRenderers
                    </li>
                    <li>
                        Inline 'AnyMergeExpression(...)'
                    </li>
                    <li>
                        Inline 'AnyMergeToken(...)'
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">40.0.0 </em> (2025-07-19)</div>
                <ul>
                    <li>
                        Partial types for the services.
                    </li>
                    <li>
                        Consolidate the DotNet "services"
                    </li>
                </ul>
            </div>
		    <div>
                <div>v <em class="di_em">39.0.0 </em> (2025-07-18)</div>
                <ul>
                    <li>
                        Consolidate the IDE "services"
                    </li>
                    <li>
                        Consolidate the TextEditor "services".
                    </li>
                    <li>
                        Merge text editor APIs into single object
                    </li>
                    <li>
                        Remove text-editor-config and text-editor-component-renderers from dependency injection container
                    </li>
                    <li>
                        Remove unused ValueType properties
                    </li>
                    <li>
                        .NET 9
                    </li>
                    <li>
                        ref struct for C# parser types
                    </li>
                </ul>
            </div>
		    <div>
                <div>v <em class="di_em">38.0.0 </em> (2025-07-17)</div>
                <ul>
                    <li>
                        Faster GetText(...) methods
                    </li>
                    <li>
                        Move active parse related methods from CSharpBinder to CSharpParserModel
                    </li>
                    <li>
                        Move the current compilation unit onto CSharpParserModel
                    </li>
                    <li>
                        ParseExpressions.cs
                    </li>
                    <li>
                        CSharpParser.cs: cleanup/small-optimizations
                    </li>
                    <li>
                        Remove TryGetCompilationUnit methods
                    </li>
                    <li>
                        Remove some no longer useful DEBUG console write lines
                    </li>
                    <li>
                        Remove ProtectedTokenSyntaxKindList
                    </li>
                    <li>
                        GlobalCodeBlockNode single instance
                    </li>
                    <li>
                        Parser optimizations
                    </li>
                    <li>
                        Method overload progress.
                    </li>
                </ul>
            </div>
		    <div>
                <div>v <em class="di_em">37.0.0 </em> (2025-07-12)</div>
                <ul>
                    <li>
                        Partial types for the same type in same file
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">36.0.0 </em> (2025-07-11)</div>
                <ul>
                    <li>
                        'partial' keyword progress (only cross file is supported currently, not two 'partial' of the same Type in same file).
                    </li>
                </ul>
            </div>
		    <div>
                <div>v <em class="di_em">35.0.0 </em> (2025-07-10)</div>
                <ul>
                    <li>
                        isVoidType hack for constructor invocation inferred type from LHS
                    </li>
                    <li>
                        Only primitives if IsImplicit && ExplicitDefinitionResourceUri is not null
                    </li>
                    <li>
                        Fix object initialization
                    </li>
                    <li>
                        Fix some explicit namespace qualification cases.
                    </li>
                    <li>
                        CloseScope - remove spaghetti code
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">34.0.0 </em> (2025-07-09)</div>
                <ul>
                    <li>
                        TextEditorTextSpan don't store the text.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">33.0.0 </em> (2025-07-08)</div>
                <ul>
                    <li>
                        C# Compiler Service gen 2 size when dogfood from 38MiB to 32.4MiB
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">32.0.0 </em> (2025-07-07)</div>
                <ul>
                    <li>
                        C# Compiler Service gen 2 size when dogfood from 41MiB to 38MiB
                        (I see that the collapse end points are wrong, I'll fix that
                         but it isn't worth delaying this for).
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">31.0.0 </em> (2025-07-05)</div>
                <ul>
                    <li>
                        C# Compiler Service gen 2 size when dogfood from 50MiB to 41MiB
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">30.0.0 </em> (2025-07-04)</div>
                <ul>
                    <li>
                        Only keep codeblocks for NamespaceStatementNode and TypeDefinitionNode
                        
                        (Explanation: even if something like tracking the codeblock is needed
                        in order to accurately perform code refactoring,
                        the current code doesn't make use of the codeblocks.
                        
                        And keeping the codeblocks around implies the solution is the codeblocks
                        but I don't actually think you'd accurately perform refactoring by tracking the codeblocks
                        recursively. It is too much garbage collection overhead.
                        
                        I think you'd actually use a flat list and the flat list contains every node
                        that was parsed.
                        
                        When it comes to child scopes then returning back to the parent and making a jump
                        in the contiguous children of the parent... look at the time I gotta go.)
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">29.0.0 </em> (2025-07-03)</div>
                <ul>
                    <li>
                        GetLineInformation optimizations.
                    </li>
                    <li>
                        More "synchronous" startup code.
                    </li>
                    <li>
                        Synchronous parsing for solution wide
                    </li>
                    <li>
                        Fix: click gutter where chevron would be but isn't break css
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">28.0.0 </em> (2025-07-02)</div>
                <ul>
                    <li>
                        Fix gutter width change progress.
                    </li>
                    <li>
                        Optimizations to services.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">27.0.0 </em> (2025-07-01)</div>
                <ul>
                    <li>
                        Goto definition fixes
                    </li>
                    <li>
                        Gutter column height fill screen at all times.
                    </li>
                    <li>
                        Fixed text selection fatal exception index out of bounds
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">26.0.0 </em> (2025-06-30)</div>
                <ul>
                    <li>
                        ICommonUiService
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
