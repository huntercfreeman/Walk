@using System.Reflection;

<div class="di_ide_info">

	<div>
        Source Code:
        <a target="_blank"
           href="https://github.com/Walk/Walk.Ide">
            
           Walk.Ide
        </a>
    </div>

	<hr/>

	<div>
        Entry Assembly:
		@{ var entryAssembly = System.Reflection.Assembly.GetEntryAssembly(); }
		<div>
			@{ var entryAssemblyName = entryAssembly.GetName(); }
            v
            <em class="di_em" title="Version">
                @(entryAssemblyName.Version)
            </em>
            ::
			@if (AssemblyCustomAttributeIsDebug(entryAssembly))
			{
				@: Debug
			}
			else
			{
				@: Release
			}
			::
            @entryAssemblyName.Name
        </div>
    </div>

	<div class="di_ide_info-main">
        Library:
    	@{ var ideAssembly = typeof(IdeInfoDisplay).Assembly; }
        <div>
			@{ var ideAssemblyName = ideAssembly.GetName(); }
            v
            <em class="di_em" title="Version">
                @(ideAssemblyName.Version)
            </em>
            ::
			@if (AssemblyCustomAttributeIsDebug(ideAssembly))
			{
				@: Debug
			}
			else
			{
				@: Release
			}
			::
            @ideAssemblyName.Name
        </div>
    </div>

	<hr/>

	<div>
		<table>
			<tr>
				<td>IsDebug_MethodConditionalAttribute_Test:</td>
				<td>@MethodConditionalAttributeIsDebug()</td>
			</tr>
			<tr>
				<td>IsDebug_Preprocessor_Test:</td>
				<td>@PreprocessorIsDebug()</td>
			</tr>
		</table>
	</div>

	<hr/>

	<div class="di_ide_info-references">
        <div>
            References
        </div>

        @{
            var referencedWalkAssembliesList = ideAssembly
                .GetReferencedAssemblies()
                .Where(x =>
					x.Name is not null &&
					(x.Name.StartsWith("Walk") ||
						x.Name.StartsWith("Fluxor") ||
						x.Name.StartsWith("Photino")))
				.OrderByDescending(x => x.Name.StartsWith("Walk"))
				.ToList();

			referencedWalkAssembliesList.AddRange(entryAssembly
                .GetReferencedAssemblies()
                .Where(x =>
					x.Name is not null &&
					x.Name.StartsWith("Photino")));
        }

        @foreach (var referencedWalkAssembly in referencedWalkAssembliesList)
        {
            if (referencedWalkAssembly.Name is null)
                continue;

            <div>
                v
                <em class="di_em" title="Version">
                    @(referencedWalkAssembly.Version)
                </em>
                ::
				@if (AssemblyCustomAttributeIsDebug(Assembly.Load(referencedWalkAssembly)))
				{
					@: Debug
				}
				else
				{
					@: Release
				}
				::
                @referencedWalkAssembly.Name
            </div>
        }
    </div>

	<hr/>
	
	@*<div>
		BackgroundTaskWorkers:
		<div>
			<div>
				ContinuousBackgroundTaskWorker: @(BackgroundTaskService.ContinuousTaskWorker.ExecuteTask?.Status.ToString() ?? "null")
			</div>
			<div>
				BlockingBackgroundTaskWorker: @(BackgroundTaskService.IndefiniteTaskWorker.ExecuteTask?.Status.ToString() ?? "null")
			</div>
		</div>
	</div>*@

	<hr/>
	
	<div>
        WalkHostingInformation:
		<div>
            <div>
                @nameof(WalkHostingInformation.WalkHostingKind): @WalkHostingInformation.WalkHostingKind
            </div>
            <div>
                @nameof(WalkHostingInformation.WalkPurposeKind): @WalkHostingInformation.WalkPurposeKind
            </div>
            <div>
                @nameof(WalkHostingInformation.BackgroundTaskService):
                @if (WalkHostingInformation.BackgroundTaskService is null)
                {
                    <text>null</text>
                }
                else
                {
                    <text>NOT-null</text>
                }
            </div>
            <div>
                @nameof(WalkHostingInformation.GetMainWindowScreenDpiFunc): @WalkHostingInformation.GetMainWindowScreenDpiFunc.Invoke()
            </div>
		</div>
	</div>
	
	<hr/>

	<div>
        Recent Changes:
		<div>
		    <div>
                <div>v <em class="di_em">22.0.0 </em> (2025-06-24)</div>
                <ul>
                    <li>
                        Draft PR
                    </li>
                    <li>
                        More tree view UI optimizations.
                    </li>
                    <li>
                        I'm making tab related UI optimizations.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">21.0.0 </em> (2025-06-23)</div>
                <ul>
                    <li>
                        Consolidate TreeView cascading parameters into 1.
                        I still have a few more changes to the tree views I need to do.
                    </li>
                    <li>
                        Solution explorer icons
                    </li>
                    <li>
                        I'm making changes to the TreeView code
                        this is only some of the changes (not done yet).
                    </li>
                    <li>
                        Consolidate SettingsDialogEntryPoint.razor
                    </li>
                    <li>
                        Consolidate WalkIdeInitializer.razor.cs
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">20.0.0 </em> (2025-06-23)</div>
                <ul>
                    <li>
                        Tooltip scrolling events
                    </li>
                    <li>
                        LambdaExpression ForceDecisionAmbiguousIdentifier
                    </li>
                    <li>
                        MemberAccessToken
                    </li>
                    <li>
                        This fixes tooltips, and dropdowns.
                    </li>
                    <li>
                        I'm making changes
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">19.0.0 </em> (2025-06-21)</div>
                <ul>
                    <li>
                        C# Array Language Reference (scope doesn't get clobbered)
                    </li>
                    <li>
                        CollectionInitializationNode
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">18.0.0 </em> (2025-06-20)</div>
                <ul>
                    <li>
                        UI optimizations
                    </li>
                    <li>
                        Consolidate many of the "Initialization" Blazor components.
                    </li>
                    <li>
                        Reduce string allocations from resizable UI
                    </li>
                    <li>
                        ...base.OnAfterRender... purge
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">17.0.0 </em> (2025-06-20)</div>
                <ul>
                    <li>
                        Tooltip positions on screen.
                    </li>
                    <li>
                        Collection initialization -> { ... },
                    </li>
                    <li>
                        Array progress
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">16.0.0 </em> (2025-06-18)</div>
                <ul>
                    <li>
                        VariableReferenceNode cases.
                    </li>
                    <li>
                        ValueTuple changes.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">15.0.0 </em> (2025-06-17)</div>
                <ul>
                    <li>
                        Functions/Constructors optional parameters.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">14.0.0 </em> (2025-06-16)</div>
                <ul>
                    <li>
                        out type inference
                    </li>
                    <li>
                        ParameterModifierKind
                    </li>
                    <li>
                        ArgumentModifierKind
                    </li>
                    <li>
                        Foreach inaccurate but precise quality of life,
                        if right hand side is a type with 1 generic parameter, and left hand side is 'var' then presume
                        the inferred type is the generic parameter's type.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">13.0.0 </em> (2025-06-15)</div>
                <ul>
                    <li>
                        Fix enum member access tooltips
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">12.0.0 </em> (2025-06-12)</div>
                <ul>
                    <li>
                        Namespace progress
                    </li>
                    <li>
                        Fix: collapse code.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">11.0.0 </em> (2025-06-11)</div>
                <ul>
                    <li>
                        TextEditorEventArgs struct for events
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">10.0.0 </em> (2025-06-10)</div>
                <ul>
                    <li>
                        Some Span optimizations in the text editor.
                    </li>
                    <li>
                		Number ToString() optimizations.
                		
                		If you see @(3.2) as "3,2" instead of "3.2",
                		then if I made a mistake, there will be CSS somewhere in the app
                		that breaks.
                		
                		But, I don't intend to make a mistake, hopefully this does not happen.
                	</li>
                	<li>
                		Text Editor CSS optimizations.
                	</li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">9.0.0 </em> (2025-06-09)</div>
                <ul>
                	<li>
                		Text Editor Optimizations
                	</li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">8.0.0 </em> (2025-06-08)</div>
                <ul>
                	<li>
                		Fix infinite loop bug.
                	</li>
                </ul>
            </div>
			<div>
                <div>v <em class="di_em">7.0.0 </em> (2025-06-08)</div>
                <ul>
                    <li>
                		Tab Width
            		</li>
            		<li>
                		Setting to have tab puts a tab key or tab width count of space characters option to pick.
            		</li>
            		<li>
                		Double to int progress
                    </li>
                    <li>
                		SolutionWide_MinimumLocalsData remove variable declarations in a single loop.
            		</li>
                    <li>
                        FixBug: Opening a file with "should set focus to text editor" bool doesn't always work (i.e.: set focus to a treeview node in the solution explorer and hit 'Enter' vs 'Space'. Enter should set focus, space shouldn't.)
                    </li>
                    <li>
                        FixBug: Changing a panel from null panel tab to having one and vice versa doesn't always result in the text editor re-measuring properly and requires a manual re-measure to be triggered.
                    </li>
                    <li>
                        FixBug: Font size changes don't trigger a text editor remeasure automatically and require a manual trigger.
                    </li>
                    <li>
                        FixBug: "undefined" member access identifiers are parsed as types by default 
                    </li>
                	<li>
                		FixBug: code search bug
        			</li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">6.0.0 </em> (2025-06-06)</div>
                <ul>
                	<li>
                		21,814 less object solution wide parse
                	</li>
                	<li>
                		C# Parser node allocation reductions.
                    </li>
                    <li>
                		Namespace autocompletion progress.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">5.0.0 </em> (2025-06-05)</div>
                <ul>
                	<li>
                		Maximum of 11 characters can be used for the hash
                    </li>
                	<li>
                		Remove FunctionDefinitionNode from FunctionInvocationReference
                    </li>
                	<li>
                		Remove VariableDeclarationNode from VariableReference
                    </li>
                	<li>
                		Remove TypeDefinitionNode.cs members cache
                    </li>
                	<li>
                		default keyword.
                	</li>
                	<li>
                		Fix generic arguments causing text afterwards to be parsed as a type.
                	</li>
                	<li>
                		Fix 'sizeof', 'typeof', and 'nameof'.
                	</li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">4.0.0 </em> (2025-06-04)</div>
                <ul>
                	<li>
                		Generic Functions
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">3.0.0 </em> (2025-06-03)</div>
                <ul>
                	<li>
                		Member autocomplete filtering by right hand side identifier if it appears prior to cursor.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">2.0.0 </em> (2025-06-02)</div>
                <ul>
                	<li>
                		Parsing Walk.sln solution wide generates 770,738 less objects (accounting for the cache now allocating some).
                		Also many random places where I reduced allocations along the way.
                    </li>
                    <li>
                		sw50k
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">1.0.0 </em> (2025-06-01)</div>
                <ul>
                	<li>
                		C# Binder string map.
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
