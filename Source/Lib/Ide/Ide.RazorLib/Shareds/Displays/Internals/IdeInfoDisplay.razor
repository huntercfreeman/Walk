@using System.Reflection;

<div class="di_ide_info">

	<div>
        Source Code:
        <a target="_blank"
           href="https://github.com/Walk/Walk.Ide">
            
           Walk.Ide
        </a>
    </div>

	<hr/>

	<div>
        Entry Assembly:
		@{ var entryAssembly = System.Reflection.Assembly.GetEntryAssembly(); }
		<div>
			@{ var entryAssemblyName = entryAssembly.GetName(); }
            v
            <em class="di_em" title="Version">
                @(entryAssemblyName.Version)
            </em>
            ::
			@if (AssemblyCustomAttributeIsDebug(entryAssembly))
			{
				@: Debug
			}
			else
			{
				@: Release
			}
			::
            @entryAssemblyName.Name
        </div>
    </div>

	<div class="di_ide_info-main">
        Library:
    	@{ var ideAssembly = typeof(IdeInfoDisplay).Assembly; }
        <div>
			@{ var ideAssemblyName = ideAssembly.GetName(); }
            v
            <em class="di_em" title="Version">
                @(ideAssemblyName.Version)
            </em>
            ::
			@if (AssemblyCustomAttributeIsDebug(ideAssembly))
			{
				@: Debug
			}
			else
			{
				@: Release
			}
			::
            @ideAssemblyName.Name
        </div>
    </div>

	<hr/>

	<div>
		<table>
			<tr>
				<td>IsDebug_MethodConditionalAttribute_Test:</td>
				<td>@MethodConditionalAttributeIsDebug()</td>
			</tr>
			<tr>
				<td>IsDebug_Preprocessor_Test:</td>
				<td>@PreprocessorIsDebug()</td>
			</tr>
		</table>
	</div>

	<hr/>

	<div class="di_ide_info-references">
        <div>
            References
        </div>

        @{
            var referencedWalkAssembliesList = ideAssembly
                .GetReferencedAssemblies()
                .Where(x =>
					x.Name is not null &&
					(x.Name.StartsWith("Walk") ||
						x.Name.StartsWith("Fluxor") ||
						x.Name.StartsWith("Photino")))
				.OrderByDescending(x => x.Name.StartsWith("Walk"))
				.ToList();

			referencedWalkAssembliesList.AddRange(entryAssembly
                .GetReferencedAssemblies()
                .Where(x =>
					x.Name is not null &&
					x.Name.StartsWith("Photino")));
        }

        @foreach (var referencedWalkAssembly in referencedWalkAssembliesList)
        {
            if (referencedWalkAssembly.Name is null)
                continue;

            <div>
                v
                <em class="di_em" title="Version">
                    @(referencedWalkAssembly.Version)
                </em>
                ::
				@if (AssemblyCustomAttributeIsDebug(Assembly.Load(referencedWalkAssembly)))
				{
					@: Debug
				}
				else
				{
					@: Release
				}
				::
                @referencedWalkAssembly.Name
            </div>
        }
    </div>

	<hr/>
	
	@*<div>
		BackgroundTaskWorkers:
		<div>
			<div>
				ContinuousBackgroundTaskWorker: @(BackgroundTaskService.ContinuousTaskWorker.ExecuteTask?.Status.ToString() ?? "null")
			</div>
			<div>
				BlockingBackgroundTaskWorker: @(BackgroundTaskService.IndefiniteTaskWorker.ExecuteTask?.Status.ToString() ?? "null")
			</div>
		</div>
	</div>*@

	<hr/>
	
	<div>
        WalkHostingInformation:
		<div>
            <div>
                @nameof(CommonService.WalkHostingInformation.WalkHostingKind): @CommonService.WalkHostingInformation.WalkHostingKind
            </div>
            <div>
                @nameof(CommonService.WalkHostingInformation.WalkPurposeKind): @CommonService.WalkHostingInformation.WalkPurposeKind
            </div>
		</div>
	</div>
	
	<hr/>

	<div>
        Recent Changes:
		<div>
		    <div>
                <div>v <em class="di_em">70.0.0 </em> (2025-08-20)</div>
                <ul>
                    <li>
                        Draft PR
                    </li>
                    <li>
                        Fix demo.
                    </li>
                    <li>
                        C# parser is twice as fast by checking length before comparing strings.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">69.0.0 </em> (2025-08-19)</div>
                <ul>
                    <li>
                        Change C# Lexer to avoid string logic when lexing keywords.
                    </li>
                    <li>
                        Outlining razor progress (some code blocks).
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">68.0.0 </em> (2025-08-18)</div>
                <ul>
                    <li>
                        Some progress on razor lexer.
                    </li>
                    <li>
                        Rewrite XML Lexer
                    </li>
                </ul>
            </div>
		    <div>
                <div>v <em class="di_em">67.0.0 </em> (2025-08-16)</div>
                <ul>
                    <li>
                        Proper "expand selection"/"double click" logic.
                    </li>
                    <li>
                        Some TextEditor optimizations
                    </li>
                    <li>
                        TextEditor mouse drag event optimizations skip render if same spot
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">66.0.0 </em> (2025-08-15)</div>
                <ul>
                    <li>
                        Re-implement (more optimally than previous way) automated namespace interpolation for templated C# files.
                    </li>
                    <li>
                        Fix demo
                    </li>
                    <li>
                        Reduce string allocations from AbsolutePath / NamespacePath
                    </li>
                    <li>
                        This contains the AbsolutePath optimizations that were more clearly safe and non-breaking.
                        I'm going to after this look into some more optimizations.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">65.0.0 </em> (2025-08-14)</div>
                <ul>
                    <li>
                        Avoid AbsolutePath allocation when doing solution wide parse.
                    </li>
                    <li>
                        Some better null checks.
                        
                        I opened Visual Studio since the StreamReader change meant I return a null.
                        I wanted to see the nullability warnings.
                        
                        And they're just all over the place.
                        
                        These cover the StreamReader change so that it doesn't NRE.
                    </li>
                    <li>
                        StreamReader checks File.Exists(...)
                        One example of this being needed was
                         when you deleted a file.
                         
                         If you went to some other file that referenced the deleted file.
                         Then that other file would throw a not found exception everytime
                         it tried to parse. So you'd end up with only Lexer syntax highlighting.
                         
                         The demo still starts off with two exception notifications
                    </li>
                    <li>
                        Some MenuOptionRecord optimizations
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">64.0.0 </em> (2025-08-13)</div>
                <ul>
                    <li>
                        Remove redundant Options_SetFromLocalStorageAsync(...) invocations
                    </li>
                    <li>
                        website demo: Move the 'Ensure Parent Directories Exist' step to be done a single time
                    </li>
                    <li>
                        Website_WriteAllText(...)
                    </li>
                    <li>
                        MultiBadgeDisplay
                    </li>
                    <li>
                        Some CSS optimizations
                    </li>
                    <li>
                        Some quick optimizations to the demo, still more can be done but I want
                        to get back to looking at the app itself.
                    </li>
                    <li>
                        More IdeMainLayout.razor optimizations (text editor group related)
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
