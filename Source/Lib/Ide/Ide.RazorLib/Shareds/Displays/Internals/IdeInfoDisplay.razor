@using System.Reflection;

<div class="di_ide_info">

	<div>
        Source Code:
        <a target="_blank"
           href="https://github.com/Walk/Walk.Ide">
            
           Walk.Ide
        </a>
    </div>

	<hr/>

	<div>
        Entry Assembly:
		@{ var entryAssembly = System.Reflection.Assembly.GetEntryAssembly(); }
		<div>
			@{ var entryAssemblyName = entryAssembly.GetName(); }
            v
            <em class="di_em" title="Version">
                @(entryAssemblyName.Version)
            </em>
            ::
			@if (AssemblyCustomAttributeIsDebug(entryAssembly))
			{
				@: Debug
			}
			else
			{
				@: Release
			}
			::
            @entryAssemblyName.Name
        </div>
    </div>

	<div class="di_ide_info-main">
        Library:
    	@{ var ideAssembly = typeof(IdeInfoDisplay).Assembly; }
        <div>
			@{ var ideAssemblyName = ideAssembly.GetName(); }
            v
            <em class="di_em" title="Version">
                @(ideAssemblyName.Version)
            </em>
            ::
			@if (AssemblyCustomAttributeIsDebug(ideAssembly))
			{
				@: Debug
			}
			else
			{
				@: Release
			}
			::
            @ideAssemblyName.Name
        </div>
    </div>

	<hr/>

	<div>
		<table>
			<tr>
				<td>IsDebug_MethodConditionalAttribute_Test:</td>
				<td>@MethodConditionalAttributeIsDebug()</td>
			</tr>
			<tr>
				<td>IsDebug_Preprocessor_Test:</td>
				<td>@PreprocessorIsDebug()</td>
			</tr>
		</table>
	</div>

	<hr/>

	<div class="di_ide_info-references">
        <div>
            References
        </div>

        @{
            var referencedWalkAssembliesList = ideAssembly
                .GetReferencedAssemblies()
                .Where(x =>
					x.Name is not null &&
					(x.Name.StartsWith("Walk") ||
						x.Name.StartsWith("Fluxor") ||
						x.Name.StartsWith("Photino")))
				.OrderByDescending(x => x.Name.StartsWith("Walk"))
				.ToList();

			referencedWalkAssembliesList.AddRange(entryAssembly
                .GetReferencedAssemblies()
                .Where(x =>
					x.Name is not null &&
					x.Name.StartsWith("Photino")));
        }

        @foreach (var referencedWalkAssembly in referencedWalkAssembliesList)
        {
            if (referencedWalkAssembly.Name is null)
                continue;

            <div>
                v
                <em class="di_em" title="Version">
                    @(referencedWalkAssembly.Version)
                </em>
                ::
				@if (AssemblyCustomAttributeIsDebug(Assembly.Load(referencedWalkAssembly)))
				{
					@: Debug
				}
				else
				{
					@: Release
				}
				::
                @referencedWalkAssembly.Name
            </div>
        }
    </div>

	<hr/>
	
	@*<div>
		BackgroundTaskWorkers:
		<div>
			<div>
				ContinuousBackgroundTaskWorker: @(BackgroundTaskService.ContinuousTaskWorker.ExecuteTask?.Status.ToString() ?? "null")
			</div>
			<div>
				BlockingBackgroundTaskWorker: @(BackgroundTaskService.IndefiniteTaskWorker.ExecuteTask?.Status.ToString() ?? "null")
			</div>
		</div>
	</div>*@

	<hr/>
	
	<div>
        WalkHostingInformation:
		<div>
            <div>
                @nameof(CommonService.WalkHostingInformation.WalkHostingKind): @CommonService.WalkHostingInformation.WalkHostingKind
            </div>
            <div>
                @nameof(CommonService.WalkHostingInformation.WalkPurposeKind): @CommonService.WalkHostingInformation.WalkPurposeKind
            </div>
		</div>
	</div>
	
	<hr/>

	<div>
        Recent Changes:
		<div>
		    <div>
                <div>v <em class="di_em">61.0.0 </em> (2025-08-10)</div>
                <ul>
                    <li>
                        Measure character width with "JavaScript alone".
                        JavaScript inserts the text, measures it, and deletes the text all in one JSInterop invocation.
                    </li>
                    <li>
                        Avoid dynamic component for panel body where applicable
                    </li>
                    <li>
                        I'm making some EXTREME UI optimizations.
                        This is only some of the changes.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">60.0.0 </em> (2025-08-09)</div>
                <ul>
                    <li>
                        Pool_NamespaceClauseNode_%: 98.0%
                    </li>
                    <li>
                        Pool_ConstructorInvocationNode_%: 95.5%
                    </li>
                    <li>
                        Pool_FunctionInvocationNode_%: 90.0%
                    </li>
                    <li>
                        DimensionUnitPurposeKind.cs
                    </li>
                    <li>
                        ProgressBarDisplay.razor optimizations
                    </li>
                    <li>
                        FunctionInvocationNode pool 64.1%
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">59.0.0 </em> (2025-08-08)</div>
                <ul>
                    <li>
                        CSharpStatementBuilder rewrite
                    </li>
                    <li>
                        Pool_VariableReferenceNode_%: 95.5%
                    </li>
                    <li>
                        50% variable reference node hits in pool
                        (this was actually around 38% at this commit).
                    </li>
                    <li>
                        Re-use StreamReaderWrap
                    </li>
                    <li>
                        FunctionArgumentEntry.cs optimizations
                    </li>
                    <li>
                        Progress re-write node pooling
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">58.0.0 </em> (2025-08-07)</div>
                <ul>
                    <li>
                        Scroll TreeView vertically down by twice the line height.
                    </li>
                    <li>
                        Explicit namespace qualification for generic parameters.
                    </li>
                    <li>
                        Explicit interface implementation
                    </li>
                    <li>
                        'as' keyword support
                    </li>
                    <li>
                        Fix menus where widgets weren't re-rendering after clicking the option to show them.
                    </li>
                    <li>
                        Fix lexer ""
                    </li>
                    <li>
                        Ignore the 'using' keyword in this scenario for now.
                    </li>
                    <li>
                        Multi-variable declaration.
                    </li>
                    <li>
                        Using code blocks
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">57.0.0 </em> (2025-08-06)</div>
                <ul>
                    <li>
                        C# parser streams files instead of reading them into memory.
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">56.0.0 </em> (2025-08-04)</div>
                <ul>
                    <li>
                        More TreeView HTML changes to make it lighter
                    </li>
                </ul>
            </div>
            <div>
                <div>v <em class="di_em">55.0.0 </em> (2025-08-03)</div>
                <ul>
                    <li>
                        TreeView some lighter HTML
                    </li>
                    <li>
                        Fix multi-layered member access autocompletion.
                    </li>
                    <li>
                        1.5 second throttle on parse.
                    </li>
                    <li>
                        2 second throttle on parse.
                    </li>
                    <li>
                        Clear TextEditor string pool after every parse.
                    </li>
                    <li>
                        Fix: autocomplete focus
                    </li>
                    <li>
                        When autocompleteEntryList.Count == 0, show an "empty" menu option.
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
