@using Walk.Common.RazorLib.Dimensions.Models
@using Walk.Common.RazorLib.Panels.Displays
@using Walk.Common.RazorLib.Panels.Models
@using Walk.Common.RazorLib.Resizes.Displays
@using Walk.Common.RazorLib.StateHasChangedBoundaries.Displays
@using Walk.Ide.RazorLib.Editors.Displays

@{ var panelState = PanelService.GetPanelState(); }

<div class="di_ide_body"
     style="@BodyElementDimensions.GetStyleString(CommonBackgroundTaskApi.UiStringBuilder)">

    <PanelGroupDisplay PanelGroupKey="PanelFacts.LeftPanelGroupKey"
                       AdjacentElementDimensions="_editorElementDimensions"
                       DimensionAttributeKind="DimensionAttributeKind.Width"
                       ReRenderSelfAndAdjacentElementDimensionsFunc="() => InvokeAsync(StateHasChanged)" />

    <ResizableColumn LeftElementDimensions="PanelFacts.GetTopLeftPanelGroup(panelState).ElementDimensions"
                     RightElementDimensions="_editorElementDimensions"
                     ReRenderFuncAsync="() => InvokeAsync(StateHasChanged)" />

    <EditorDisplay EditorElementDimensions="_editorElementDimensions" />
    
    <ResizableColumn LeftElementDimensions="_editorElementDimensions"
                     RightElementDimensions="PanelFacts.GetTopRightPanelGroup(panelState).ElementDimensions"
                     ReRenderFuncAsync="() => InvokeAsync(StateHasChanged)" />

    <PanelGroupDisplay PanelGroupKey="PanelFacts.RightPanelGroupKey"
                       AdjacentElementDimensions="_editorElementDimensions"
                       DimensionAttributeKind="DimensionAttributeKind.Width"
                       ReRenderSelfAndAdjacentElementDimensionsFunc="() => InvokeAsync(StateHasChanged)" />
</div>
