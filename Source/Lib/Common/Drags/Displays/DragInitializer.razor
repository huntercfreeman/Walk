<div class="di_drag-initializer"
     style="@StyleCss"
     @onmousemove="DRAG_DispatchSetDragStateActionOnMouseMove"
     @onmouseup="DRAG_DispatchSetDragStateActionOnMouseUp">
    
	@{
		var dragState = DragService.GetDragState();
		var draggableViewModel = dragState.Drag;
	}

	@if (draggableViewModel is not null)
	{
		var dropzoneViewModelList = draggableViewModel.DropzoneList;

		if (draggableViewModel.DragComponentType is not null)
		{
			<div style="@dragState.DragElementDimensions.GetStyleString(CommonUtilityService.UiStringBuilder)">
				<DragDisplay/>
			</div>
		}

		foreach (var dropzone in dropzoneViewModelList)
		{
			<div style="z-index: @dropzone.MeasuredHtmlElementDimensions.ZIndex; @dropzone.ElementDimensions.GetStyleString(CommonUtilityService.UiStringBuilder)"
				 class="di_dropzone @DRAG_GetIsActiveCssClass(dropzone) @dropzone.CssClass"
				 @onmouseover="() => _onMouseOverDropzone = dropzone"
				 @onmouseover:stopPropagation="true">
			</div>
		}
	}
</div>
