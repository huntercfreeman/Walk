@using Walk.Common.RazorLib.Keys.Models;
@using Walk.Common.RazorLib.TreeViews.Models;
@using Walk.Common.RazorLib.Dimensions;
@using Walk.Common.RazorLib.Dimensions.Models;

@{ _treeViewContainer = CommonService.GetTreeViewContainer(TreeViewContainerKey); }

<div id="@_htmlId"
     class="@GetContainerElementCssClass(_treeViewContainer)"
     style="@CssStyleString"
     tabindex="0"
     @ref="_treeViewStateDisplayElementReference">

    @if (_treeViewContainer is null)
    {
        <div>@nameof(_treeViewContainer) was null</div>
    }
    else
    {
        var flatNodeList = GetFlatNodes();
        foreach (var node in GetFlatNodes())
        {
            <div class="@GetNodeElementCssClass(node)"
                 style="display: flex; align-items: center; padding-left: @(node.Depth * OffsetPerDepthInPixels)px; height: @(_lineHeight)px;">
                @{
                	var appOptionsState = CommonService.GetAppOptionsState();
                
                	var iconDriver = new IconDriver(
						appOptionsState.Options.IconSizeInPixels,
						appOptionsState.Options.IconSizeInPixels);
                }

                @if (node.IsExpandable)
                {
                    <span style="cursor: pointer;">
                        @if (node.IsExpanded)
                        {
                            @IconChevronDownFragment.Render(iconDriver)
                        }
                        else
                        {
                            @IconChevronRightFragment.Render(iconDriver)
                        }
                    </span>
                    
                }
                else
                {
                    @IconBlankFragment.Render(iconDriver)
                }
                
                <span style="margin-right: 3px;">
                    @node.GetIcon(iconDriver)
                </span>
                
                @node.GetDisplayText()
            </div>
        }
    }
</div>
