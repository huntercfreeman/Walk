@using Walk.Common.RazorLib.Keys.Models;
@using Walk.Common.RazorLib.TreeViews.Models;
@using Walk.Common.RazorLib.Dimensions;
@using Walk.Common.RazorLib.Dimensions.Models;

@*@{ _treeViewContainer = null; }*@
@{ _treeViewContainer = CommonService.GetTreeViewContainer(TreeViewContainerParameter.TreeViewContainerKey); }

<div id="@_htmlId"
     class="@GetContainerElementCssClass(_treeViewContainer)"
     tabindex="0">

    @if (_treeViewContainer is null)
    {
        <div>@nameof(_treeViewContainer) was null</div>
    }
    else
    {
        _treeViewContainer.ElementIdOfComponentRenderingThis = _htmlId;
    	var appOptionsState = CommonService.GetAppOptionsState();
    
    	var iconDriver = new IconDriver(
			appOptionsState.Options.IconSizeInPixels,
			appOptionsState.Options.IconSizeInPixels);
    
        var list = GetFlatNodes();
        IndexActiveNode = 0;
        string? cssClass;

        var startingIndex = (int)(_treeViewMeasurements.ScrollTop / CommonService.Options_LineHeight);
        if (startingIndex > 1)
            startingIndex -= 2;
        else if (startingIndex > 0)
            startingIndex -= 1;
        
        if (startingIndex < 0)
        {
            startingIndex = 0;
        }
            
        var upperLimitIndex = (int)Math.Ceiling(_treeViewMeasurements.ViewHeight / CommonService.Options_LineHeight) + startingIndex;
        upperLimitIndex += 2;
        if (upperLimitIndex > list.Count)
        {
            upperLimitIndex = list.Count;
        }
        
        if (upperLimitIndex < 0)
        {
            upperLimitIndex = 0;
        }

        <div style="height: @(CommonService.Options_LineHeight * list.Count)px; width: 1px; position: absolute;"></div>

        for (int i = startingIndex; i < upperLimitIndex; i++)
        {
            var node = list[i];
        
            if ((_treeViewContainer.ActiveNode?.Key ?? Key<TreeViewNoType>.Empty) == node.Key)
            {
                cssClass = "di_active di_selected";
                IndexActiveNode = i;
            }
            else
            {
                cssClass = null;
            }
        
            <div class="@cssClass"
                 style="@GetNodeElementCssStyle(node, i)">

                @if (node.IsExpandable)
                {
                    <span style="cursor: pointer;">
                        @if (node.IsExpanded)
                        {
                            @IconChevronDownFragment.Render(iconDriver)
                        }
                        else
                        {
                            @IconChevronRightFragment.Render(iconDriver)
                        }
                    </span>
                }
                else
                {
                    <span>
                        @IconBlankFragment.Render(iconDriver)
                    </span>
                }

                @node.GetIcon(iconDriver)

                <div class="@node.GetDisplayTextCssClass()" title="@node.GetHoverText()">
                    @node.GetDisplayText()
                </div>
            </div>
        }
    }
    
    @*<div class="di_te_scrollbar-section">
		
		<div class="di_te_scrollbar di_te_scrollbar-horizontal"
		     id="@HORIZONTAL_ScrollbarElementId"
		     style="@virtualizationResult.HORIZONTAL_ScrollbarCssStyle">
		    
		    <div class="di_te_scrollbar-slider"
		         id="@HORIZONTAL_ScrollbarSliderElementId"
		         style="@virtualizationResult.HORIZONTAL_SliderCssStyle">
		    </div>
		</div><!--
		
		--><div class="di_te_scrollbar di_te_scrollbar-vertical"
		        id="@VERTICAL_ScrollbarElementId">
		         
		    <div class="di_te_scrollbar-slider"
		         id="@VERTICAL_ScrollbarSliderElementId"
		         style="@virtualizationResult.VERTICAL_SliderCssStyle">
		    </div>
		</div><!--
	    
		--><div class="di_te_scrollbar di_te_scrollbar-connector"
		        id="@CONNECTOR_ScrollbarElementId">
		</div>
	</div>*@
</div>
