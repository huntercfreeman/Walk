@using Walk.Common.RazorLib.Keys.Models;
@using Walk.Common.RazorLib.TreeViews.Models;
@using Walk.Common.RazorLib.Dimensions;
@using Walk.Common.RazorLib.Dimensions.Models;

@*@{ _treeViewContainer = null; }*@
@{ _treeViewContainer = CommonService.GetTreeViewContainer(TreeViewContainerParameter.TreeViewContainerKey); }

<div id="@_htmlId"
     class="@GetContainerElementCssClass(_treeViewContainer)"
     tabindex="0">

    @if (_treeViewContainer is null)
    {
        <div>@nameof(_treeViewContainer) was null</div>
    }
    else
    {
        _treeViewContainer.ElementIdOfComponentRenderingThis = _htmlId;
    	var appOptionsState = CommonService.GetAppOptionsState();
    
    	var iconDriver = new IconDriver(
			appOptionsState.Options.IconSizeInPixels,
			appOptionsState.Options.IconSizeInPixels);
    
        var list = GetFlatNodes();
        IndexActiveNode = 0;
        for (int i = 0; i < list.Count; i++)
        {
            var node = list[i];
            string cssClass;
        
            if ((_treeViewContainer.ActiveNode?.Key ?? Key<TreeViewNoType>.Empty) == node.Key)
            {
                cssClass = "di_active di_selected";
                IndexActiveNode = i;
            }
            else
            {
                cssClass = null;
            }
        
            <div class="@cssClass"
                 style="@GetNodeElementCssStyle(node)">

                @if (node.IsExpandable)
                {
                    <span style="cursor: pointer;">
                        @if (node.IsExpanded)
                        {
                            @IconChevronDownFragment.Render(iconDriver)
                        }
                        else
                        {
                            @IconChevronRightFragment.Render(iconDriver)
                        }
                    </span>
                    
                }
                else
                {
                    <span>
                        @IconBlankFragment.Render(iconDriver)
                    </span>
                }
                
                @node.GetIcon(iconDriver)
                
                <span style="margin-left: 3px;" class="@node.GetDisplayTextCssClass()" title="@node.GetHoverText()">
                    @node.GetDisplayText()
                </span>
            </div>
        }
    }
</div>
