@using Walk.Common.RazorLib.Keys.Models;
@using Walk.Common.RazorLib.TreeViews.Models;
@using Walk.Common.RazorLib.Dimensions;
@using Walk.Common.RazorLib.Dimensions.Models;

@{
    var treeViewContainer = CommonService.GetTreeViewContainer(TreeViewContainerKey);
    
    _treeViewCascadingValueBatch.TreeViewContainer = treeViewContainer;
    _treeViewCascadingValueBatch.HandleTreeViewOnContextMenu = HandleTreeViewOnContextMenu;
    _treeViewCascadingValueBatch.TreeViewMouseEventHandler = TreeViewMouseEventHandler;
    _treeViewCascadingValueBatch.TreeViewKeyboardEventHandler = TreeViewKeyboardEventHandler;
    _treeViewCascadingValueBatch.CommonService = CommonService;
    _treeViewCascadingValueBatch.OffsetPerDepthInPixels = OffsetPerDepthInPixels;
    _treeViewCascadingValueBatch.WalkTreeViewIconWidth = WalkTreeViewIconWidth;

    <div class="@GetContainerElementCssClass(treeViewContainer)"
         style="@CssStyleString"
         tabindex="0"
         @ref="_treeViewStateDisplayElementReference"
         @onkeydownwithpreventscroll="(e) => HandleTreeViewOnKeyDownWithPreventScroll(e, treeViewContainer)"
         @oncontextmenu:preventDefault="true"
         @oncontextmenu:stopPropagation="true"
         @oncontextmenu="(e) => HandleTreeViewOnContextMenu(e, treeViewContainer?.Key ?? Key<TreeViewContainer>.Empty, null)">

        @if (treeViewContainer is null)
        {
            <div>@nameof(treeViewContainer) was null</div>
        }
        else
        {
            var flatNodeList = GetFlatNodes();
            foreach (var node in GetFlatNodes())
            {
                <div class="@GetNodeElementCssClass(node)">
                    @{
                    	var appOptionsState = CommonService.GetAppOptionsState();
                    
                    	var iconDriver = new IconDriver(
    						appOptionsState.Options.IconSizeInPixels,
    						appOptionsState.Options.IconSizeInPixels);
                    }
    
                    @if (node.IsExpandable)
                    {
                        if (node.IsExpanded)
                        {
                            @IconChevronDownFragment.Render(iconDriver)
                        }
                        else
                        {
                            @IconChevronRightFragment.Render(iconDriver)
                        }
                    }
                    else
                    {
                        @IconBlankFragment.Render(iconDriver)
                    }
                    
                    @node.GetIcon(iconDriver)
                    
                    @node.GetDisplayText()
                </div>
            }
        }
    </div>
}
