@using Walk.Common.RazorLib.Keys.Models;
@using Walk.Common.RazorLib.TreeViews.Models;
@using Walk.Common.RazorLib.Dimensions;
@using Walk.Common.RazorLib.Dimensions.Models;

@{ _treeViewContainer = CommonService.GetTreeViewContainer(TreeViewContainerKey); }

<div id="@_htmlId"
     class="@GetContainerElementCssClass(_treeViewContainer)"
     style="@CssStyleString"
     tabindex="0">

    @if (_treeViewContainer is null)
    {
        <div>@nameof(_treeViewContainer) was null</div>
    }
    else
    {
    	var appOptionsState = CommonService.GetAppOptionsState();
    
    	var iconDriver = new IconDriver(
			appOptionsState.Options.IconSizeInPixels,
			appOptionsState.Options.IconSizeInPixels);
    
        foreach (var node in GetFlatNodes())
        {
            var isActive = (_treeViewContainer.ActiveNode?.Key ?? Key<TreeViewNoType>.Empty) == node.Key;
            var cssClass = isActive ? "di_tree-view-title di_active di_selected" : "di_tree-view-title";
        
            <div class="@cssClass"
                 style="@GetNodeElementCssStyle(node)">

                @if (node.IsExpandable)
                {
                    <span style="cursor: pointer;">
                        @if (node.IsExpanded)
                        {
                            @IconChevronDownFragment.Render(iconDriver)
                        }
                        else
                        {
                            @IconChevronRightFragment.Render(iconDriver)
                        }
                    </span>
                    
                }
                else
                {
                    @IconBlankFragment.Render(iconDriver)
                }
                
                @node.GetIcon(iconDriver)
                
                <span style="margin-left: 3px;" class="@node.GetDisplayTextCssClass()" title="@node.GetHoverText()">
                    @node.GetDisplayText()
                </span>
            </div>
        }
    }
</div>
