@using Walk.Common.RazorLib.Dynamics.Models
@using Walk.Common.RazorLib.Resizes.Displays

@{
	var dialogState = CommonService.GetDialogState();
	var dialogStateIsActiveSelection = dialogState.ActiveDialogKey == Dialog.DynamicViewModelKey;
}

<div class="di_dialog-display @Dialog.DialogCssClass @GetCssClassForDialogStateIsActiveSelection(dialogStateIsActiveSelection)"
     style="@Dialog.DialogElementDimensions.GetStyleString(CommonService.UiStringBuilder) @IsMaximizedStyleCssString"
     id="@Dialog.DialogFocusPointHtmlElementId"
     tabindex="-1"
     @onfocusin="HandleOnFocusIn"
     @onmousedown="HandleOnMouseDown">

    @if (Dialog.DialogIsResizable && !Dialog.DialogIsMaximized)
    {
        <ResizableDisplay @ref="_resizableDisplay"
                          ElementDimensions="Dialog.DialogElementDimensions"
                          ReRenderFuncAsync="ReRenderAsync"
                          Drag="Dialog as IDrag" />
    }

    <div class="di_dialog-display-toolbar"
         @onmousedown="SubscribeMoveHandleAsync">
        <div class="di_dialog-display-title di_unselectable"
             style="@DialogTitleCssStyleString"
             title="@Dialog.Title">
            @Dialog.Title
        </div>

        <div class="di_dialog-display-buttons"
             @onmousedown:stopPropagation="true">
             
            @{
            	var appOptionsState = CommonService.GetAppOptionsState();
            
            	var iconDriver = new IconDriver(
					appOptionsState.Options.IconSizeInPixels,
					appOptionsState.Options.IconSizeInPixels);
            }
            
            @if (Dialog.DialogIsResizable)
            {
                <button class="di_button di_dialog-display-button-entry"
                        @onclick="ToggleIsMaximized">

                    @if (Dialog.DialogIsMaximized)
                    {
                        @IconRestoreFragment.Render(iconDriver)
                    }
                    else
                    {
                        @IconMaximizeFragment.Render(iconDriver)
                    }
                </button>
            }
            
            <button class="di_button di_dialog-display-button-entry"
                    @onclick="DispatchDisposeDialogRecordAction">
                @IconCloseFragment.Render(iconDriver)
            </button>
        </div>
    </div>

    <div class="di_dialog-display-body">
        <CascadingValue Value="Dialog" IsFixed="true">
            <DynamicComponent Type="Dialog.ComponentType"
                              Parameters="Dialog.ComponentParameterMap" />
        </CascadingValue>
    </div>
</div>
