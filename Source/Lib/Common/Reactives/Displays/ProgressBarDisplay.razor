
@{
    // 1 pC
    // 2 GTE
    // 3 fillWidthInPercentage
    // 4 fillWidthInPercentage
    // 5 fillWidthInPercentage
    // 6 percentageComplete
    // 7 percentageComplete
    // 8 percentageComplete
    // 9 percentageComplete.Length
    // 10 percentageComplete.Length
    // 11 percentageComplete.Length
    // 12 cancelButtonWidthInPercentage
    // 13 cancelButtonWidthInPercentage
    // 14 cancelButtonWidthInPercentage
    // 644 objects allocated during SWP 23 projects
    
    // 1 pC
    // 2 GTE
    // 3 percentageComplete
    // 4 percentageComplete
    // 5 percentageComplete
    // 6 percentageComplete.Length
    // 7 percentageComplete.Length
    // 8 percentageComplete.Length
    //
    // 2 object allocations in OnInitialized()
    //
    // 372 objects allocated during SWP 23 projects
}

<div class="di_progress-bar">
	@{
		var localProgressBarModel = ProgressBarModel;

		// Don't bother with string formatting the double, just cast it to an int,
		// and manually add the '%'.
		//
		// String formatting and css can break if the wrong culture is used,
		// (i.e.: any locations that use a period in place of a comma to deliminate
		//       1,000 and up.)
		//
		// If one uses the correct culture it would be fine, but I'm just not going
		// to deal with it here, at the least for now.
		var localDecimalPercentProgress = Math.Ceiling(localProgressBarModel.DecimalPercentProgress * 100);
		var percentageComplete = $"{localDecimalPercentProgress}%";
	}
    
    <div class="di_progress-bar-time-elapsed">
		@($"{localProgressBarModel.GetTimeElapsed().TotalSeconds:N3}") seconds
	</div>
    
    <div class="di_progress-bar" style="display: flex;">
    	<div class="di_progress-bar-fill"
	         style="@_progressBarFillCssStyle">
	
			<div class="di_progress-bar-fill-slider"
				 style="background-color: var(--di_active-with-focus-background-color); width: @(percentageComplete); height: 100%;">
			</div>
	
			<div class="di_progress-bar-fill-text"
				 style="position: absolute; left: calc(50% - @(percentageComplete.Length)ch); top: calc(0.2em + 1px);">
				@percentageComplete
			</div>
		</div>
		
		@if (localProgressBarModel.IsCancellable)
		{
			<div style="@_cancelButtonContainingDivCssStyle">
				<button class="di_button"
						style="width: 100%; height: 100%;"
					    disabled=@(localProgressBarModel.IsCancelled || localProgressBarModel.IntentToCancel || localProgressBarModel.IsDisposed)
					    @onclick="localProgressBarModel.Cancel">
					
					@if (localProgressBarModel.IsCancelled)
					{
						<text>IsCancelled</text>
					}
					else if (localProgressBarModel.IntentToCancel)
					{
						<text>Cancelling</text>
					}
					else if (localProgressBarModel.IsDisposed)
					{
						<text>Disposed</text>
					}
					else
					{
						<text>Cancel</text>
					}
				</button>
			</div>
		}
    </div>

	@if (!string.IsNullOrWhiteSpace(localProgressBarModel.Message))
	{
		<div class="di_progress-bar-message">@localProgressBarModel.Message</div>
	}

	@if (!string.IsNullOrWhiteSpace(localProgressBarModel.SecondaryMessage))
	{
		<div class="di_progress-bar-message-secondary">@localProgressBarModel.SecondaryMessage</div>
	}
</div>