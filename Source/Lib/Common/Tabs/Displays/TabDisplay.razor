@using Walk.Common.RazorLib.Notifications.Models;

@if (RenderBatch is not null)
{
	var localTabViewModel = Tab;
	var localTabGroup = localTabViewModel.TabGroup;
	
	if (localTabGroup is null)
	{
		NotificationHelper.DispatchError(
	        "TabGroup was null",
	        "TabGroup was null",
	        RenderBatch.CommonService,
	        TimeSpan.FromSeconds(6));
	}
	
	CalculateCssClass(localTabGroup, localTabViewModel);
    
    <button class="@_cssClass"
    		id="@HtmlId"
            title="@localTabViewModel.TitleVerbose"
    		@ref="_tabButtonElementReference"
    		@onclick:stopPropagation="true"
    		@onclick="e => OnClick(localTabViewModel, e)"
    		@onmousedown:stopPropagation="true"
    		@onmousedown:preventDefault="true"
            @onmousedown="HandleOnMouseDownAsync"
            @onmouseup="HandleOnMouseUp"
            @onmouseout="HandleOnMouseOutAsync"
    		@oncontextmenu:preventDefault="true"
    		@oncontextmenu:stopPropagation="true"
    		@oncontextmenu="e => ManuallyPropagateOnContextMenu(e, localTabViewModel)">
    
    	<span class="di_polymorphic-tab-text">@localTabViewModel.Title</span>
    
    	@if (ShouldDisplayCloseButton)
    	{
    		<button class="di_button di_button-close"
    	            @onclick:stopPropagation="true"
    	            @onclick="CloseTabOnClickAsync">
    	        
    	        @{
    	        	var appOptionsState = RenderBatch.CommonService.GetAppOptionsState();
    	        
    	        	var iconDriver = new IconDriver(
    					appOptionsState.Options.IconSizeInPixels,
    					appOptionsState.Options.IconSizeInPixels);
    	        }
    	        @IconCloseFragment.Render(iconDriver)
        	</button>
    	}
    </button>
}