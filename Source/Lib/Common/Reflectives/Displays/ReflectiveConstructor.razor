<div class="di_reflective-constructor @IsActiveCssClass">

	@{
		var appOptionsState = AppOptionsService.GetAppOptionsState();
	
		var iconDriver = new IconDriver(
			appOptionsState.Options.IconSizeInPixels,
			appOptionsState.Options.IconSizeInPixels);
	}

    @if (IsChosenConstructor)
    {
        <button class="di_button"
                @onclick="InvokeOnUnsetChosenConstructorInfo">
            @IconCloseFragment.Render(iconDriver)
        </button>
    }
    else
    {
        <button class="di_button"
                @onclick="InvokeOnClick">
            @IconCSharpProjectFragment.Render(iconDriver)
        </button>
    }

    <span class="di_te_keyword">
        new
    </span>
    
    <span class="di_reflective-argument-list">
        (

        @{ var parameterInfoList = ConstructorInfo.GetParameters(); }

        @for (var i = 0; i < parameterInfoList.Length; i++)
        {
            var index = i;
            var parameter = parameterInfoList[index];

            <ReflectiveVariable VariableType="parameter.ParameterType"
                                     VariableName="@parameter.Name"
                                     ParametersKey="@(ParametersKey + '.' + parameter.Name)"
                                     IsProperty="false" />

            @if (i != parameterInfoList.Length - 1)
            {
                @: ,&nbsp;
            }
        }

        )
    </span>
</div>