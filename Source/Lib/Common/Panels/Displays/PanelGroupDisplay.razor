@using Walk.Common.RazorLib.Panels.Models;
@using Walk.Common.RazorLib.Tabs.Displays;
@using Walk.Common.RazorLib.Badges.Displays;
@using Walk.Common.RazorLib.Notifications.Models;

@{
    var panelState = CommonService.GetPanelState();

    var panelGroup = panelState.PanelGroupList.FirstOrDefault(x => x.Key == PanelGroupParameter.PanelGroupKey);

    IPanelTab? activePanelTab = null;

    if (panelGroup is not null)
        activePanelTab = panelGroup.TabList.FirstOrDefault(x => x.Key == panelGroup.ActiveTabKey);

	var appOptionsState = CommonService.GetAppOptionsState();
	var iconDriver = new IconDriver(
		appOptionsState.Options.IconSizeInPixels,
		appOptionsState.Options.IconSizeInPixels);
}

<div class="@GetPanelElementCssClass()"
     style="@GetElementDimensionsStyleString(panelGroup, activePanelTab)"
	 id="@_panelPositionCss">
    
    <div class="di_ide_panel-tabs"
		 id="@_htmlIdTabs">

        @if (panelGroup is not null)
        {
			var tabList = GetTabList(panelGroup);
			
            _tabCascadingValueBatch.CommonService = CommonService;
        	_tabCascadingValueBatch.HandleTabButtonOnContextMenu = null;
			
			foreach (var panelTab in tabList)
            {
                var Tab = panelTab;
                var localTabViewModel = panelTab;
				var ShouldDisplayCloseButton = false;
            
                @if (_tabCascadingValueBatch is not null)
                {
                	var localTabGroup = localTabViewModel.TabGroup;
                	
                	// localTabGroup can be null here
                	
                    <button class="@GetCssClass(localTabGroup, localTabViewModel)"
                            title="@localTabViewModel.TitleVerbose"
                    		@key="panelTab.Key"
                    		@onclick="e => OnClick(localTabViewModel, e)"
                            @onmousedown="e => HandleOnMouseDownAsync(localTabViewModel, e)"
                            @onmouseup="HandleOnMouseUp"
                            @onmouseout="e => HandleOnMouseOutAsync(localTabViewModel, e)"
                    		@oncontextmenu:preventDefault="true"
                    		@oncontextmenu="e => ManuallyPropagateOnContextMenu(e, localTabViewModel)">
                    
                    	<span class="di_polymorphic-tab-text">@localTabViewModel.Title</span>
                    
                    	@if (ShouldDisplayCloseButton)
                    	{
                    		<button class="di_button di_button-close"
                    	            @onclick:stopPropagation="true"
                    	            @onclick="() => CloseTabOnClickAsync(localTabViewModel)">
                    	        @IconCloseFragment.Render(iconDriver)
                        	</button>
                    	}
                    </button>
                }
            }
        }

        @if (PanelGroupParameter.BadgeList is not null)
        {
            <div class="di_ide_panel-tabs-justify-end"
                 style="display: flex;">
                @foreach (var badgeModel in PanelGroupParameter.BadgeList)
            	{
                	    <BadgeDisplay @key="badgeModel.Key"
                	                  BadgeModel="badgeModel"/>
            	}
        	</div>
        }
        

        @if (panelState.DragEventArgs is not null)
        {
            <div class="di_ide_panel-tab-dropzone di_ide_panel-tab-dropzone-top"
                 @onmouseup:stopPropagation="true"
                 @onmouseup="TopDropzoneOnMouseUp">
            </div>
            
            <div class="di_ide_panel-tab-dropzone di_ide_panel-tab-dropzone-bottom"
                 @onmouseup:stopPropagation="true"
                 @onmouseup="BottomDropzoneOnMouseUp">
            </div>
        }
    </div>
    
    <div class="di_ide_panel-body">
        @if (activePanelTab is not null)
        {
            <DynamicComponent Type="activePanelTab.ComponentType"
                              Parameters="activePanelTab.ComponentParameterMap" />
        }
    </div>
    
</div>