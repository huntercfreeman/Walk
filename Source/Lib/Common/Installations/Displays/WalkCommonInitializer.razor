@using Walk.Common.RazorLib.Dialogs.Displays
@using Walk.Common.RazorLib.Widgets.Displays
@using Walk.Common.RazorLib.Notifications.Displays
@using Walk.Common.RazorLib.OutOfBoundsClicks.Displays
@using Walk.Common.RazorLib.Dropdowns.Displays

@{ var dialogList = CommonService.GetDialogState().DialogList; }
@foreach (var dialog in dialogList)
{
    <DialogDisplay @key="dialog.DynamicViewModelKey" 
                   Dialog="dialog"/>
}


@{ var widgetState = CommonService.GetWidgetState(); }
@if (widgetState.Widget is not null)
{
	<OutOfBoundsClickDisplay ZIndex="12"
	                         OnMouseDownCallback="WIDGET_RemoveWidget" />
}
@if (widgetState.Widget is not null)
{
	<WidgetDisplay @key="widgetState.Widget.Key"
				   Widget="widgetState.Widget"/>
}


@{ var notificationState = CommonService.GetNotificationState(); }
@for (int i = 0; i < notificationState.DefaultList.Count; i++)
{
    var index = i;
    var notification = notificationState.DefaultList[index];
    
    <NotificationDisplay @key="notification.DynamicViewModelKey" 
                         Notification="notification"
                         Index="index"/>
}


@{ var dropdownState = CommonService.GetDropdownState(); }
@if (dropdownState.DropdownList.Count > 0 && dropdownState.DropdownList.Any(x => x.ShouldShowOutOfBoundsClickDisplay))
{
	<OutOfBoundsClickDisplay ZIndex="15"
	                         OnMouseDownCallback="DROPDOWN_ClearActiveKeyList" />
}
@foreach (var dropdown in dropdownState.DropdownList)
{
	<DropdownDisplay @key="dropdown.Key"
					 Dropdown="dropdown"/>
}


@{ var localOutlineState = CommonService.GetOutlineState(); }
@if (localOutlineState.MeasuredHtmlElementDimensions is not null)
{
	<div class="di_outline di_outline-left"
		 style="@OUTLINE_GetStyleCssLeft(localOutlineState)">
	</div>
	
	<div class="di_outline di_outline-right"
		 style="@OUTLINE_GetStyleCssRight(localOutlineState)">
	</div>
	
	<div class="di_outline di_outline-top"
		 style="@OUTLINE_GetStyleCssTop(localOutlineState)">
	</div>
	
	<div class="di_outline di_outline-bottom"
		 style="@OUTLINE_GetStyleCssBottom(localOutlineState)">
	</div>
}


<div class="di_tooltip-initializer"></div>
@{
    var tooltipModel = CommonService.GetTooltipState().TooltipModel;
    
    if (tooltipModel is not null)
	{
		var x = tooltipModel.X;
		var y = tooltipModel.Y;
	
		if (Math.Abs(ValueTooltipRelativeX - x) >= 0.1)
		{
			ValueTooltipRelativeX = x;
			TooltipRelativeX = x.ToString(System.Globalization.CultureInfo.InvariantCulture);
		}
	
		if (Math.Abs(ValueTooltipRelativeY - y) >= 0.1)
		{
			ValueTooltipRelativeY = y;
			TooltipRelativeY = y.ToString(System.Globalization.CultureInfo.InvariantCulture);
		}
	}
}
@if (tooltipModel is not null)
{
    <div class="di_te_tooltip di_set-selectable @(tooltipModel.CssClassString ?? string.Empty)"
         style="left: @(TooltipRelativeX)px; top: @(TooltipRelativeY)px;"
         id="@CommonService.Tooltip_HtmlElementId"
         @onmouseover="tooltipModel.OnMouseOver"
         @onmousedown:stopPropagation="true"
         @onwheel="x => tooltipModel.OnWheel?.Invoke(tooltipModel, x) ?? Task.CompletedTask"
         @onmousemove:stopPropagation="true"
         @ondblclick:stopPropagation="true"
         @onclick:stopPropagation="true"
         @oncontextmenu:stopPropagation="true">

        @if (tooltipModel.RendererType is null)
        {
            <text>tooltipModel.RendererType is null</text>
        }
        else
        {
            <DynamicComponent Type="tooltipModel.RendererType"
                              Parameters="tooltipModel.ParameterMap" />
        }
    </div>
}
