@* Start DialogInitializer *@
@using Walk.Common.RazorLib.Contexts.Models
@using Walk.Common.RazorLib.Contexts.Displays
@using Walk.Common.RazorLib.Dialogs.Displays

@{ var dialogList = DialogService.GetDialogState().DialogList; }

@foreach (var dialog in dialogList)
{
    <DialogDisplay @key="dialog.DynamicViewModelKey" 
                   Dialog="dialog"/>
}

@*
	TODO: Would wrapping the foreach in a div i.e.:
		  
		  <div class="di_dialog-initializer"></div>
		  
		  Cause the gaps between dialogs to create invisible walls
		  or some other weird behaviors?
		  
		  It is (2024-05-26), I can't recall if I left out an encompassing
		  div for a reason or not, but I don't have time to look into this
		  at the moment.
*@
@* End DialogInitializer *@



@* Start WidgetInitializer *@
@using Walk.Common.RazorLib.Contexts.Models
@using Walk.Common.RazorLib.Contexts.Displays
@using Walk.Common.RazorLib.OutOfBoundsClicks.Displays
@using Walk.Common.RazorLib.Widgets.Displays

@{ var widgetState = WidgetService.GetWidgetState(); }

@if (widgetState.Widget is not null)
{
	<OutOfBoundsClickDisplay ZIndex="12"
	                         OnMouseDownCallback="WIDGET_RemoveWidget" />
}

@if (widgetState.Widget is not null)
{
	<WidgetDisplay @key="widgetState.Widget.Key"
				   Widget="widgetState.Widget"/>
}
@* End WidgetInitializer *@



@* Start NotificationInitializer *@
@using Walk.Common.RazorLib.Contexts.Models
@using Walk.Common.RazorLib.Contexts.Displays
@using Walk.Common.RazorLib.Notifications.Displays

@{ var notificationState = NotificationService.GetNotificationState(); }

@for (int i = 0; i < notificationState.DefaultList.Count; i++)
{
    var index = i;
    var notification = notificationState.DefaultList[index];
    
    <NotificationDisplay @key="notification.DynamicViewModelKey" 
                         Notification="notification"
                         Index="index"/>
}

@*
	TODO: Would wrapping the for-loop in a div i.e.:
		  
		  <div class="di_notification-initializer"></div>
		  
		  Cause the gaps between notifications to create invisible walls
		  or some other weird behaviors?
		  
		  It is (2024-05-26), I can't recall if I left out an encompassing
		  div for a reason or not, but I don't have time to look into this
		  at the moment.
*@
@* End NotificationInitializer *@



@* Start DropdownInitializer *@
@using Walk.Common.RazorLib.Contexts.Models
@using Walk.Common.RazorLib.Contexts.Displays
@using Walk.Common.RazorLib.OutOfBoundsClicks.Displays
@using Walk.Common.RazorLib.Dropdowns.Displays

@{ var dropdownState = DropdownService.GetDropdownState(); }

@if (dropdownState.DropdownList.Count > 0 && dropdownState.DropdownList.Any(x => x.ShouldShowOutOfBoundsClickDisplay))
{
	<OutOfBoundsClickDisplay ZIndex="15"
	                         OnMouseDownCallback="DROPDOWN_ClearActiveKeyList" />
}

@foreach (var dropdown in dropdownState.DropdownList)
{
	<DropdownDisplay @key="dropdown.Key"
					 Dropdown="dropdown"/>
}
@* End DropdownInitializer *@



@* Start OutlineInitializer *@
@{ var localOutlineState = OutlineService.GetOutlineState(); }

@if (localOutlineState.MeasuredHtmlElementDimensions is not null)
{
	<div class="di_outline di_outline-left"
		 style="@OUTLINE_GetStyleCssLeft(localOutlineState)">
	</div>
	
	<div class="di_outline di_outline-right"
		 style="@OUTLINE_GetStyleCssRight(localOutlineState)">
	</div>
	
	<div class="di_outline di_outline-top"
		 style="@OUTLINE_GetStyleCssTop(localOutlineState)">
	</div>
	
	<div class="di_outline di_outline-bottom"
		 style="@OUTLINE_GetStyleCssBottom(localOutlineState)">
	</div>
}
@* End OutlineInitializer *@



@* Start TooltipInitializer *@
<div class="di_tooltip-initializer"></div>

@{
    var tooltipModel = TooltipService.GetTooltipState().TooltipModel;
    
    if (tooltipModel is not null)
	{
		var x = tooltipModel.X;
		var y = tooltipModel.Y;
	
		if (Math.Abs(ValueTooltipRelativeX - x) >= 0.1)
		{
			ValueTooltipRelativeX = x;
			TooltipRelativeX = x.ToString(System.Globalization.CultureInfo.InvariantCulture);
		}
	
		if (Math.Abs(ValueTooltipRelativeY - y) >= 0.1)
		{
			ValueTooltipRelativeY = y;
			TooltipRelativeY = y.ToString(System.Globalization.CultureInfo.InvariantCulture);
		}
	}
}
	    
@if (tooltipModel is not null)
{
    <div class="di_te_tooltip di_set-selectable @(tooltipModel.CssClassString ?? string.Empty)"
         style="left: @(TooltipRelativeX)px; top: @(TooltipRelativeY)px;"
         id="@TooltipService.HtmlElementId"
         @onmouseover="tooltipModel.OnMouseOver"
         @onmousedown:stopPropagation="true"
         @onmousemove:stopPropagation="true"
         @ondblclick:stopPropagation="true"
         @onclick:stopPropagation="true"
         @oncontextmenu:stopPropagation="true">

        <DynamicComponent Type="tooltipModel.RendererType"
                          Parameters="tooltipModel.ParameterMap" />
    </div>
}
@* End TooltipInitializer *@


