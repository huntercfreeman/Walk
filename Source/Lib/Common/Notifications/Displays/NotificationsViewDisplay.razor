@using Walk.Common.RazorLib.Dynamics.Models
@using Walk.Common.RazorLib.Notifications.Models;

@{ var notificationState = CommonService.GetNotificationState(); }

<div class="di_web_notifications-view">
    <div class="di_web_notifications-view-tabs">
        @foreach (var notificationsViewKind in Enum.GetValues<NotificationsViewKind>())
        {
            <button class="di_web_notifications-view-tab-entry di_button @GetIsActiveCssClass(_chosenNotificationsViewKind, notificationsViewKind)"
                    @onclick="() => _chosenNotificationsViewKind = notificationsViewKind">

                @notificationsViewKind

                <span class="di_web_notifications-view-tab-entry-count">
                    (<!--
                    -->@switch (notificationsViewKind)
                    {
                        case NotificationsViewKind.Notifications:
                            @: @notificationState.DefaultList.Count
                            break;
                    }<!--
                    -->)
                </span>
            </button>
        }
    </div>

    <div class="di_web_notifications-view-body">
        @{
            IReadOnlyList<INotification> entriesToRenderList;
            var clearOnClick = _defaultClearAction;

            switch (_chosenNotificationsViewKind)
            {
                case NotificationsViewKind.Notifications:
                    entriesToRenderList = notificationState.DefaultList;
                    clearOnClick = Clear;
                    break;
            	default:
            		entriesToRenderList = Array.Empty<INotification>();
            		break;
            }

            <button class="di_button"
                    @onclick="clearOnClick">
                Clear @_chosenNotificationsViewKind
            </button>

            foreach (var entry in entriesToRenderList)
            {
                <div @key="entry.DynamicViewModelKey"
                     class="di_web_notifications-view-body-entry">
                    
                    <CascadingValue Value="entry">
                        <DynamicComponent Type="entry.ComponentType"
                                          Parameters="entry.ComponentParameterMap" />
                    </CascadingValue>
                </div>

                <hr/>
            }
        }
    </div>
</div>