<div class="di_menu-display" tabindex="0" @onkeydown="HandleOnKeyDown">
    @{
        var menuOptionsGroupedByKindList = MenuRecord.MenuOptionList
            .GroupBy(x => x.MenuOptionKind)
            .SelectMany(x => x);
    
        var previousKind = menuOptionsGroupedByKindList.FirstOrDefault()?.MenuOptionKind ?? Walk.Common.RazorLib.Menus.Models.MenuOptionKind.Create;
        
        var appOptionsState = CommonService.GetAppOptionsState();
    
    	var iconDriver = new IconDriver(
			appOptionsState.Options.IconSizeInPixels,
			appOptionsState.Options.IconSizeInPixels);
    }
    
    @for (var i = 0; i < MenuRecord.MenuOptionList.Count; i++)
    {
        var menuOption = MenuRecord.MenuOptionList[i];
        
        var cssClass = _activeIndex == i
            ? "di_menu-option-display di_unselectable di_active"
            : "di_menu-option-display di_unselectable";

        if (previousKind != menuOption.MenuOptionKind)
        {
            previousKind = menuOption.MenuOptionKind;
            <hr class="di_hr"/>
        }
        
        // anonymous lambdas as an event handler within a loop isn't a good idea, this is temporary
        <div class="@cssClass">
            
            @*@if (IconRenderFragment is not null)
            {
                <div class="di_menu-option-icon">
                    @IconRenderFragment(menuOption)
                </div>
            }*@
            
            @menuOption.DisplayName
            
            @if (menuOption.SubMenu is not null)
            {
                @IconChevronRightFragment.Render(iconDriver)
            }
        
            @*@if (i == IndexMenuOptionShouldDisplayWidget)
            {
                <div class="di_menu-option-widget"
                     @onclick:stopPropagation="true"
                     @ondblclick:stopPropagation="true"
                     @onkeydown:stopPropagation="true"
                     @onkeydownwithpreventscroll:stopPropagation="true"
                     @oncontextmenu:stopPropagation="true">
        
                    <CascadingValue Value="MenuOptionCallbacks">
                        <DynamicComponent Type="MenuOptionRecord.WidgetRendererType"
                                          Parameters="MenuOptionRecord.WidgetParameterMap"/>
                    </CascadingValue>
                </div>
            }*@
        </div>
    }
</div>