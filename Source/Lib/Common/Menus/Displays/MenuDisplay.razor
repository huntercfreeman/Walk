@using Walk.Common.RazorLib.Menus.Models;
@using Walk.Common.RazorLib.FileSystems.Models
@using Walk.Common.RazorLib.FileSystems.Displays
@using Walk.Common.RazorLib.Widgets.Models

<div id="@_htmlId" class="di_menu-display" tabindex="0">
    @{
        if (_seenWidgetHeight != WidgetHeight)
        {
            _seenWidgetHeight = WidgetHeight;
            _widgetHeightCssStyle = $"height: {_seenWidgetHeight}px";
        }
    
        _horizontalRuleElementIndexHashSet.Clear();
    
        var previousKind = Menu.MenuOptionList.FirstOrDefault().MenuOptionKind;
        
        var appOptionsState = CommonService.GetAppOptionsState();
    
    	var iconDriver = new IconDriver(
			appOptionsState.Options.IconSizeInPixels,
			appOptionsState.Options.IconSizeInPixels);
    }
    
    @for (var i = 0; i < Menu.MenuOptionList.Count; i++)
    {
        var menuOption = Menu.MenuOptionList[i];
        
        var cssClass = _activeIndex == i
            ? "di_menu-option-display di_unselectable di_active"
            : "di_menu-option-display di_unselectable";

        if (previousKind != menuOption.MenuOptionKind)
        {
            previousKind = menuOption.MenuOptionKind;
            <hr class="di_hr"/>
            _horizontalRuleElementIndexHashSet.Add(i);
        }
        
        <div class="@cssClass" style="@CommonService.Options_LineHeight_CssStyle">
            
            @if (Menu.UseIcons)
            {
                <div class="di_menu-option-icon">
                    @switch (menuOption.IconKind)
                    {
                        case AutocompleteEntryKind.Word:
                            @IconSymbolKeyFragment.Render(iconDriver)
                            break;
                        case AutocompleteEntryKind.Snippet:
                            @IconNoteFragment.Render(iconDriver)
                            break;
                        case AutocompleteEntryKind.Variable:
                            @IconSymbolFieldFragment.Render(iconDriver)
                            break;
                        case AutocompleteEntryKind.Function:
                            @IconSymbolMethodFragment.Render(iconDriver)
                            break;
                        case AutocompleteEntryKind.Type:
                            @IconSymbolClassFragment.Render(iconDriver)
                            break;
                        case AutocompleteEntryKind.Namespace:
                            @IconSymbolNamespaceFragment.Render(iconDriver)
                            break;
                    }
                </div>
            }
            
            @menuOption.DisplayName
            
            @if (menuOption.IconKind == AutocompleteEntryKind.Chevron)
            {
                @IconChevronRightFragment.Render(iconDriver)
            }
        </div>
        
        @*@if (i == _indexMenuOptionShouldDisplayWidget)
        {
            <CascadingValue Value="MenuOptionCallbacks">
                <div class="di_menu-option-widget"
                     style="@_widgetHeightCssStyle"
                     @onclick:stopPropagation="true"
                     @ondblclick:stopPropagation="true"
                     @onmousedown:stopPropagation="true"
                     @onkeydown:stopPropagation="true"
                     @oncontextmenu:stopPropagation="true">
        
                    
                </div>
            </CascadingValue>
        }*@
    }
</div>
